{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { applySnapshot, onSnapshot } from \"mobx-state-tree\";\nimport * as storage from \"../../utils/storage\";\nvar ROOT_STATE_STORAGE_KEY = \"root-v1\";\nvar _disposer;\nexport function setupRootStore(_x) {\n  return _setupRootStore.apply(this, arguments);\n}\nfunction _setupRootStore() {\n  _setupRootStore = _asyncToGenerator(function* (rootStore) {\n    var restoredState;\n    try {\n      var _yield$storage$load;\n      restoredState = (_yield$storage$load = yield storage.load(ROOT_STATE_STORAGE_KEY)) != null ? _yield$storage$load : {};\n      applySnapshot(rootStore, restoredState);\n    } catch (e) {\n      if (__DEV__) {\n        console.tron.error(e.message, null);\n      }\n    }\n    if (_disposer) _disposer();\n    _disposer = onSnapshot(rootStore, function (snapshot) {\n      return storage.save(ROOT_STATE_STORAGE_KEY, snapshot);\n    });\n    var unsubscribe = function unsubscribe() {\n      _disposer();\n      _disposer = undefined;\n    };\n    return {\n      rootStore: rootStore,\n      restoredState: restoredState,\n      unsubscribe: unsubscribe\n    };\n  });\n  return _setupRootStore.apply(this, arguments);\n}","map":{"version":3,"names":["applySnapshot","onSnapshot","storage","ROOT_STATE_STORAGE_KEY","_disposer","setupRootStore","_x","_setupRootStore","apply","arguments","_asyncToGenerator","rootStore","restoredState","_yield$storage$load","load","e","__DEV__","console","tron","error","message","snapshot","save","unsubscribe","undefined"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/models/helpers/setupRootStore.ts"],"sourcesContent":["/**\n * This file is where we do \"rehydration\" of your RootStore from AsyncStorage.\n * This lets you persist your state between app launches.\n *\n * Navigation state persistence is handled in navigationUtilities.tsx.\n *\n * Note that Fast Refresh doesn't play well with this file, so if you edit this,\n * do a full refresh of your app instead.\n *\n * @refresh reset\n */\nimport { applySnapshot, IDisposer, onSnapshot } from \"mobx-state-tree\"\nimport { RootStore, RootStoreSnapshot } from \"../RootStore\"\nimport * as storage from \"../../utils/storage\"\n\n/**\n * The key we'll be saving our state as within async storage.\n */\nconst ROOT_STATE_STORAGE_KEY = \"root-v1\"\n\n/**\n * Setup the root state.\n */\nlet _disposer: IDisposer\nexport async function setupRootStore(rootStore: RootStore) {\n  let restoredState: RootStoreSnapshot | undefined | null\n\n  try {\n    // load the last known state from AsyncStorage\n    restoredState = ((await storage.load(ROOT_STATE_STORAGE_KEY)) ?? {}) as RootStoreSnapshot\n    applySnapshot(rootStore, restoredState)\n  } catch (e) {\n    // if there's any problems loading, then inform the dev what happened\n    if (__DEV__) {\n      console.tron.error(e.message, null)\n    }\n  }\n\n  // stop tracking state changes if we've already setup\n  if (_disposer) _disposer()\n\n  // track changes & save to AsyncStorage\n  _disposer = onSnapshot(rootStore, (snapshot) => storage.save(ROOT_STATE_STORAGE_KEY, snapshot))\n\n  const unsubscribe = () => {\n    _disposer()\n    _disposer = undefined\n  }\n\n  return { rootStore, restoredState, unsubscribe }\n}\n"],"mappings":";AAWA,SAASA,aAAa,EAAaC,UAAU,QAAQ,iBAAiB;AAEtE,OAAO,KAAKC,OAAO;AAKnB,IAAMC,sBAAsB,GAAG,SAAS;AAKxC,IAAIC,SAAoB;AACxB,gBAAsBC,cAAcA,CAAAC,EAAA;EAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA0BnC,SAAAF,gBAAA;EAAAA,eAAA,GAAAG,iBAAA,CA1BM,WAA8BC,SAAoB,EAAE;IACzD,IAAIC,aAAmD;IAEvD,IAAI;MAAA,IAAAC,mBAAA;MAEFD,aAAa,IAAAC,mBAAA,SAAWX,OAAO,CAACY,IAAI,CAACX,sBAAsB,CAAC,YAAAU,mBAAA,GAAK,CAAC,CAAuB;MACzFb,aAAa,CAACW,SAAS,EAAEC,aAAa,CAAC;IACzC,CAAC,CAAC,OAAOG,CAAC,EAAE;MAEV,IAAIC,OAAO,EAAE;QACXC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACK,OAAO,EAAE,IAAI,CAAC;MACrC;IACF;IAGA,IAAIhB,SAAS,EAAEA,SAAS,CAAC,CAAC;IAG1BA,SAAS,GAAGH,UAAU,CAACU,SAAS,EAAE,UAACU,QAAQ;MAAA,OAAKnB,OAAO,CAACoB,IAAI,CAACnB,sBAAsB,EAAEkB,QAAQ,CAAC;IAAA,EAAC;IAE/F,IAAME,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;MACxBnB,SAAS,CAAC,CAAC;MACXA,SAAS,GAAGoB,SAAS;IACvB,CAAC;IAED,OAAO;MAAEb,SAAS,EAATA,SAAS;MAAEC,aAAa,EAAbA,aAAa;MAAEW,WAAW,EAAXA;IAAY,CAAC;EAClD,CAAC;EAAA,OAAAhB,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}