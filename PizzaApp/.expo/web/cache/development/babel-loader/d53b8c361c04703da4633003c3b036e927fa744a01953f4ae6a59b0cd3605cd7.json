{"ast":null,"code":"import { types } from \"mobx-state-tree\";\nimport { withSetPropAction } from \"./helpers/withSetPropAction\";\nimport { formatDate } from \"../utils/formatDate\";\nimport { translate } from \"../i18n\";\nexport var EpisodeModel = types.model(\"Episode\").props({\n  guid: types.identifier,\n  title: \"\",\n  pubDate: \"\",\n  link: \"\",\n  author: \"\",\n  thumbnail: \"\",\n  description: \"\",\n  content: \"\",\n  enclosure: types.frozen(),\n  categories: types.array(types.string)\n}).actions(withSetPropAction).views(function (episode) {\n  return {\n    get parsedTitleAndSubtitle() {\n      var _episode$title;\n      var defaultValue = {\n        title: (_episode$title = episode.title) == null ? void 0 : _episode$title.trim(),\n        subtitle: \"\"\n      };\n      if (!defaultValue.title) return defaultValue;\n      var titleMatches = defaultValue.title.match(/^(RNR.*\\d)(?: - )(.*$)/);\n      if (!titleMatches || titleMatches.length !== 3) return defaultValue;\n      return {\n        title: titleMatches[1],\n        subtitle: titleMatches[2]\n      };\n    },\n    get datePublished() {\n      try {\n        var formatted = formatDate(episode.pubDate);\n        return {\n          textLabel: formatted,\n          accessibilityLabel: translate(\"demoPodcastListScreen.accessibility.publishLabel\", {\n            date: formatted\n          })\n        };\n      } catch (error) {\n        return {\n          textLabel: \"\",\n          accessibilityLabel: \"\"\n        };\n      }\n    },\n    get duration() {\n      var seconds = Number(episode.enclosure.duration);\n      var h = Math.floor(seconds / 3600);\n      var m = Math.floor(seconds % 3600 / 60);\n      var s = Math.floor(seconds % 3600 % 60);\n      var hDisplay = h > 0 ? h + \":\" : \"\";\n      var mDisplay = m > 0 ? m + \":\" : \"\";\n      var sDisplay = s > 0 ? s : \"\";\n      return {\n        textLabel: hDisplay + mDisplay + sDisplay,\n        accessibilityLabel: translate(\"demoPodcastListScreen.accessibility.durationLabel\", {\n          hours: h,\n          minutes: m,\n          seconds: s\n        })\n      };\n    }\n  };\n});","map":{"version":3,"names":["types","withSetPropAction","formatDate","translate","EpisodeModel","model","props","guid","identifier","title","pubDate","link","author","thumbnail","description","content","enclosure","frozen","categories","array","string","actions","views","episode","parsedTitleAndSubtitle","_episode$title","defaultValue","trim","subtitle","titleMatches","match","length","datePublished","formatted","textLabel","accessibilityLabel","date","error","duration","seconds","Number","h","Math","floor","m","s","hDisplay","mDisplay","sDisplay","hours","minutes"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/models/Episode.ts"],"sourcesContent":["import { Instance, SnapshotIn, SnapshotOut, types } from \"mobx-state-tree\"\nimport { withSetPropAction } from \"./helpers/withSetPropAction\"\nimport { formatDate } from \"../utils/formatDate\"\nimport { translate } from \"../i18n\"\n\ninterface Enclosure {\n  link: string\n  type: string\n  length: number\n  duration: number\n  rating: { scheme: string; value: string }\n}\n\n/**\n * This represents an episode of React Native Radio.\n */\nexport const EpisodeModel = types\n  .model(\"Episode\")\n  .props({\n    guid: types.identifier,\n    title: \"\",\n    pubDate: \"\", // Ex: 2022-08-12 21:05:36\n    link: \"\",\n    author: \"\",\n    thumbnail: \"\",\n    description: \"\",\n    content: \"\",\n    enclosure: types.frozen<Enclosure>(),\n    categories: types.array(types.string),\n  })\n  .actions(withSetPropAction)\n  .views((episode) => ({\n    get parsedTitleAndSubtitle() {\n      const defaultValue = { title: episode.title?.trim(), subtitle: \"\" }\n\n      if (!defaultValue.title) return defaultValue\n\n      const titleMatches = defaultValue.title.match(/^(RNR.*\\d)(?: - )(.*$)/)\n\n      if (!titleMatches || titleMatches.length !== 3) return defaultValue\n\n      return { title: titleMatches[1], subtitle: titleMatches[2] }\n    },\n    get datePublished() {\n      try {\n        const formatted = formatDate(episode.pubDate)\n        return {\n          textLabel: formatted,\n          accessibilityLabel: translate(\"demoPodcastListScreen.accessibility.publishLabel\", {\n            date: formatted,\n          }),\n        }\n      } catch (error) {\n        return { textLabel: \"\", accessibilityLabel: \"\" }\n      }\n    },\n    get duration() {\n      const seconds = Number(episode.enclosure.duration)\n      const h = Math.floor(seconds / 3600)\n      const m = Math.floor((seconds % 3600) / 60)\n      const s = Math.floor((seconds % 3600) % 60)\n\n      const hDisplay = h > 0 ? `${h}:` : \"\"\n      const mDisplay = m > 0 ? `${m}:` : \"\"\n      const sDisplay = s > 0 ? s : \"\"\n      return {\n        textLabel: hDisplay + mDisplay + sDisplay,\n        accessibilityLabel: translate(\"demoPodcastListScreen.accessibility.durationLabel\", {\n          hours: h,\n          minutes: m,\n          seconds: s,\n        }),\n      }\n    },\n  }))\n\nexport interface Episode extends Instance<typeof EpisodeModel> {}\nexport interface EpisodeSnapshotOut extends SnapshotOut<typeof EpisodeModel> {}\nexport interface EpisodeSnapshotIn extends SnapshotIn<typeof EpisodeModel> {}\n\n// @demo remove-file\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}