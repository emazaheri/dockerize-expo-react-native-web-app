{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { RootStoreModel } from \"../RootStore\";\nimport { setupRootStore } from \"./setupRootStore\";\nvar _rootStore = RootStoreModel.create({});\nvar RootStoreContext = createContext(_rootStore);\nexport var RootStoreProvider = RootStoreContext.Provider;\nexport var useStores = function useStores() {\n  return useContext(RootStoreContext);\n};\nexport var useInitialRootStore = function useInitialRootStore(callback) {\n  var rootStore = useStores();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    rehydrated = _useState2[0],\n    setRehydrated = _useState2[1];\n  useEffect(function () {\n    var _unsubscribe;\n    _asyncToGenerator(function* () {\n      var _yield$setupRootStore = yield setupRootStore(rootStore),\n        unsubscribe = _yield$setupRootStore.unsubscribe;\n      _unsubscribe = unsubscribe;\n      if (__DEV__) {\n        console.tron.trackMstNode(rootStore);\n      }\n      setRehydrated(true);\n      if (callback) callback();\n    })();\n    return function () {\n      if (_unsubscribe) _unsubscribe();\n    };\n  }, []);\n  return {\n    rootStore: rootStore,\n    rehydrated: rehydrated\n  };\n};","map":{"version":3,"names":["createContext","useContext","useEffect","useState","RootStoreModel","setupRootStore","_rootStore","create","RootStoreContext","RootStoreProvider","Provider","useStores","useInitialRootStore","callback","rootStore","_useState","_useState2","_slicedToArray","rehydrated","setRehydrated","_unsubscribe","_asyncToGenerator","_yield$setupRootStore","unsubscribe","__DEV__","console","tron","trackMstNode"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/models/helpers/useStores.ts"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\"\nimport { RootStore, RootStoreModel } from \"../RootStore\"\nimport { setupRootStore } from \"./setupRootStore\"\n\n/**\n * Create the initial (empty) global RootStore instance here.\n *\n * Later, it will be rehydrated in app.tsx with the setupRootStore function.\n *\n * If your RootStore requires specific properties to be instantiated,\n * you can do so here.\n *\n * If your RootStore has a _ton_ of sub-stores and properties (the tree is\n * very large), you may want to use a different strategy than immediately\n * instantiating it, although that should be rare.\n */\nconst _rootStore = RootStoreModel.create({})\n\n/**\n * The RootStoreContext provides a way to access\n * the RootStore in any screen or component.\n */\nconst RootStoreContext = createContext<RootStore>(_rootStore)\n\n/**\n * You can use this Provider to specify a *different* RootStore\n * than the singleton version above if you need to. Generally speaking,\n * this Provider & custom RootStore instances would only be used in\n * testing scenarios.\n */\nexport const RootStoreProvider = RootStoreContext.Provider\n\n/**\n * A hook that screens and other components can use to gain access to\n * our stores:\n *\n * const rootStore = useStores()\n *\n * or:\n *\n * const { someStore, someOtherStore } = useStores()\n */\nexport const useStores = () => useContext(RootStoreContext)\n\n/**\n * Used only in the app.tsx file, this hook sets up the RootStore\n * and then rehydrates it. It connects everything with Reactotron\n * and then lets the app know that everything is ready to go.\n */\nexport const useInitialRootStore = (callback: () => void | Promise<void>) => {\n  const rootStore = useStores()\n  const [rehydrated, setRehydrated] = useState(false)\n\n  // Kick off initial async loading actions, like loading fonts and rehydrating RootStore\n  useEffect(() => {\n    let _unsubscribe\n    ;(async () => {\n      // set up the RootStore (returns the state restored from AsyncStorage)\n      const { unsubscribe } = await setupRootStore(rootStore)\n      _unsubscribe = unsubscribe\n\n      // reactotron integration with the MST root store (DEV only)\n      if (__DEV__) {\n        console.tron.trackMstNode(rootStore)\n      }\n\n      // let the app know we've finished rehydrating\n      setRehydrated(true)\n\n      // invoke the callback, if provided\n      if (callback) callback()\n    })()\n\n    return () => {\n      // cleanup\n      if (_unsubscribe) _unsubscribe()\n    }\n  }, [])\n\n  return { rootStore, rehydrated }\n}\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAAoBC,cAAc;AAClC,SAASC,cAAc;AAcvB,IAAMC,UAAU,GAAGF,cAAc,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;AAM5C,IAAMC,gBAAgB,GAAGR,aAAa,CAAYM,UAAU,CAAC;AAQ7D,OAAO,IAAMG,iBAAiB,GAAGD,gBAAgB,CAACE,QAAQ;AAY1D,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA;EAAA,OAASV,UAAU,CAACO,gBAAgB,CAAC;AAAA;AAO3D,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIC,QAAoC,EAAK;EAC3E,IAAMC,SAAS,GAAGH,SAAS,CAAC,CAAC;EAC7B,IAAAI,SAAA,GAAoCZ,QAAQ,CAAC,KAAK,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAGhCd,SAAS,CAAC,YAAM;IACd,IAAIkB,YAAY;IACfC,iBAAA,CAAC,aAAY;MAEZ,IAAAC,qBAAA,SAA8BjB,cAAc,CAACS,SAAS,CAAC;QAA/CS,WAAW,GAAAD,qBAAA,CAAXC,WAAW;MACnBH,YAAY,GAAGG,WAAW;MAG1B,IAAIC,OAAO,EAAE;QACXC,OAAO,CAACC,IAAI,CAACC,YAAY,CAACb,SAAS,CAAC;MACtC;MAGAK,aAAa,CAAC,IAAI,CAAC;MAGnB,IAAIN,QAAQ,EAAEA,QAAQ,CAAC,CAAC;IAC1B,CAAC,EAAE,CAAC;IAEJ,OAAO,YAAM;MAEX,IAAIO,YAAY,EAAEA,YAAY,CAAC,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,SAAS,EAATA,SAAS;IAAEI,UAAU,EAAVA;EAAW,CAAC;AAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}