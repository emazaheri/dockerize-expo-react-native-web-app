{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { DarkTheme, DefaultTheme, NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport * as Screens from \"../screens\";\nimport Config from \"../config\";\nimport { useStores } from \"../models\";\nimport { DemoNavigator } from \"./DemoNavigator\";\nimport { navigationRef, useBackButtonHandler } from \"./navigationUtilities\";\nimport { colors } from \"../theme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar exitRoutes = Config.exitRoutes;\nvar Stack = createNativeStackNavigator();\nvar AppStack = observer(function AppStack() {\n  var _useStores = useStores(),\n    isAuthenticated = _useStores.authenticationStore.isAuthenticated;\n  return _jsx(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      navigationBarColor: colors.background\n    },\n    initialRouteName: isAuthenticated ? \"Welcome\" : \"Login\",\n    children: isAuthenticated ? _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Welcome\",\n        component: Screens.WelcomeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Demo\",\n        component: DemoNavigator\n      })]\n    }) : _jsx(_Fragment, {\n      children: _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: Screens.LoginScreen\n      })\n    })\n  });\n});\nexport var AppNavigator = observer(function AppNavigator(props) {\n  var colorScheme = useColorScheme();\n  useBackButtonHandler(function (routeName) {\n    return exitRoutes.includes(routeName);\n  });\n  return _jsx(NavigationContainer, _objectSpread(_objectSpread({\n    ref: navigationRef,\n    theme: colorScheme === \"dark\" ? DarkTheme : DefaultTheme\n  }, props), {}, {\n    children: _jsx(AppStack, {})\n  }));\n});","map":{"version":3,"names":["DarkTheme","DefaultTheme","NavigationContainer","createNativeStackNavigator","observer","React","useColorScheme","Screens","Config","useStores","DemoNavigator","navigationRef","useBackButtonHandler","colors","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","exitRoutes","Stack","AppStack","_useStores","isAuthenticated","authenticationStore","Navigator","screenOptions","headerShown","navigationBarColor","background","initialRouteName","children","Screen","name","component","WelcomeScreen","LoginScreen","AppNavigator","props","colorScheme","routeName","includes","_objectSpread","ref","theme"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/navigators/AppNavigator.tsx"],"sourcesContent":["/**\n * The app navigator (formerly \"AppNavigator\" and \"MainNavigator\") is used for the primary\n * navigation flows of your app.\n * Generally speaking, it will contain an auth flow (registration, login, forgot password)\n * and a \"main\" flow which the user will use once logged in.\n */\nimport {\n  DarkTheme,\n  DefaultTheme,\n  NavigationContainer,\n  NavigatorScreenParams, // @demo remove-current-line\n} from \"@react-navigation/native\"\nimport { createNativeStackNavigator, NativeStackScreenProps } from \"@react-navigation/native-stack\"\nimport { observer } from \"mobx-react-lite\"\nimport React from \"react\"\nimport { useColorScheme } from \"react-native\"\nimport * as Screens from \"app/screens\"\nimport Config from \"../config\"\nimport { useStores } from \"../models\" // @demo remove-current-line\nimport { DemoNavigator, DemoTabParamList } from \"./DemoNavigator\" // @demo remove-current-line\nimport { navigationRef, useBackButtonHandler } from \"./navigationUtilities\"\nimport { colors } from \"app/theme\"\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * If no params are allowed, pass through `undefined`. Generally speaking, we\n * recommend using your MobX-State-Tree store(s) to keep application state\n * rather than passing state through navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n *   https://reactnavigation.org/docs/typescript/#organizing-types\n */\nexport type AppStackParamList = {\n  Welcome: undefined\n  Login: undefined // @demo remove-current-line\n  Demo: NavigatorScreenParams<DemoTabParamList> // @demo remove-current-line\n  // ðŸ”¥ Your screens go here\n  // IGNITE_GENERATOR_ANCHOR_APP_STACK_PARAM_LIST\n}\n\n/**\n * This is a list of all the route names that will exit the app if the back button\n * is pressed while in that screen. Only affects Android.\n */\nconst exitRoutes = Config.exitRoutes\n\nexport type AppStackScreenProps<T extends keyof AppStackParamList> = NativeStackScreenProps<\n  AppStackParamList,\n  T\n>\n\n// Documentation: https://reactnavigation.org/docs/stack-navigator/\nconst Stack = createNativeStackNavigator<AppStackParamList>()\n\nconst AppStack = observer(function AppStack() {\n  // @demo remove-block-start\n  const {\n    authenticationStore: { isAuthenticated },\n  } = useStores()\n\n  // @demo remove-block-end\n  return (\n    <Stack.Navigator\n      screenOptions={{ headerShown: false, navigationBarColor: colors.background }}\n      initialRouteName={isAuthenticated ? \"Welcome\" : \"Login\"} // @demo remove-current-line\n    >\n      {/* @demo remove-block-start */}\n      {isAuthenticated ? (\n        <>\n          {/* @demo remove-block-end */}\n          <Stack.Screen name=\"Welcome\" component={Screens.WelcomeScreen} />\n          {/* @demo remove-block-start */}\n          <Stack.Screen name=\"Demo\" component={DemoNavigator} />\n        </>\n      ) : (\n        <>\n          <Stack.Screen name=\"Login\" component={Screens.LoginScreen} />\n        </>\n      )}\n      {/* @demo remove-block-end */}\n      {/** ðŸ”¥ Your screens go here */}\n      {/* IGNITE_GENERATOR_ANCHOR_APP_STACK_SCREENS */}\n    </Stack.Navigator>\n  )\n})\n\nexport interface NavigationProps\n  extends Partial<React.ComponentProps<typeof NavigationContainer>> {}\n\nexport const AppNavigator = observer(function AppNavigator(props: NavigationProps) {\n  const colorScheme = useColorScheme()\n\n  useBackButtonHandler((routeName) => exitRoutes.includes(routeName))\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n      {...props}\n    >\n      <AppStack />\n    </NavigationContainer>\n  )\n})\n"],"mappings":";;;AAMA,SACEA,SAAS,EACTC,YAAY,EACZC,mBAAmB,QAEd,0BAA0B;AACjC,SAASC,0BAA0B,QAAgC,gCAAgC;AACnG,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAAA,OAAAC,cAAA;AAEzB,OAAO,KAAKC,OAAO;AACnB,OAAOC,MAAM;AACb,SAASC,SAAS;AAClB,SAASC,aAAa;AACtB,SAASC,aAAa,EAAEC,oBAAoB;AAC5C,SAASC,MAAM;AAAmB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AA2BlC,IAAMC,UAAU,GAAGZ,MAAM,CAACY,UAAU;AAQpC,IAAMC,KAAK,GAAGlB,0BAA0B,CAAoB,CAAC;AAE7D,IAAMmB,QAAQ,GAAGlB,QAAQ,CAAC,SAASkB,QAAQA,CAAA,EAAG;EAE5C,IAAAC,UAAA,GAEId,SAAS,CAAC,CAAC;IADUe,eAAe,GAAAD,UAAA,CAAtCE,mBAAmB,CAAID,eAAe;EAIxC,OACET,IAAA,CAACM,KAAK,CAACK,SAAS;IACdC,aAAa,EAAE;MAAEC,WAAW,EAAE,KAAK;MAAEC,kBAAkB,EAAEhB,MAAM,CAACiB;IAAW,CAAE;IAC7EC,gBAAgB,EAAEP,eAAe,GAAG,SAAS,GAAG,OAAQ;IAAAQ,QAAA,EAGvDR,eAAe,GACdL,KAAA,CAAAF,SAAA;MAAAe,QAAA,GAEEjB,IAAA,CAACM,KAAK,CAACY,MAAM;QAACC,IAAI,EAAC,SAAS;QAACC,SAAS,EAAE5B,OAAO,CAAC6B;MAAc,CAAE,CAAC,EAEjErB,IAAA,CAACM,KAAK,CAACY,MAAM;QAACC,IAAI,EAAC,MAAM;QAACC,SAAS,EAAEzB;MAAc,CAAE,CAAC;IAAA,CACtD,CAAC,GAEHK,IAAA,CAAAE,SAAA;MAAAe,QAAA,EACEjB,IAAA,CAACM,KAAK,CAACY,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAE5B,OAAO,CAAC8B;MAAY,CAAE;IAAC,CAC7D;EACH,CAIc,CAAC;AAEtB,CAAC,CAAC;AAKF,OAAO,IAAMC,YAAY,GAAGlC,QAAQ,CAAC,SAASkC,YAAYA,CAACC,KAAsB,EAAE;EACjF,IAAMC,WAAW,GAAGlC,cAAc,CAAC,CAAC;EAEpCM,oBAAoB,CAAC,UAAC6B,SAAS;IAAA,OAAKrB,UAAU,CAACsB,QAAQ,CAACD,SAAS,CAAC;EAAA,EAAC;EAEnE,OACE1B,IAAA,CAACb,mBAAmB,EAAAyC,aAAA,CAAAA,aAAA;IAClBC,GAAG,EAAEjC,aAAc;IACnBkC,KAAK,EAAEL,WAAW,KAAK,MAAM,GAAGxC,SAAS,GAAGC;EAAa,GACrDsC,KAAK;IAAAP,QAAA,EAETjB,IAAA,CAACO,QAAQ,IAAE;EAAC,EACO,CAAC;AAE1B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}