{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useScrollToTop } from \"@react-navigation/native\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useRef, useState } from \"react\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { colors } from \"../theme\";\nimport { useSafeAreaInsetsStyle } from \"../utils/useSafeAreaInsetsStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar isIos = Platform.OS === \"ios\";\nfunction isNonScrolling(preset) {\n  return !preset || preset === \"fixed\";\n}\nfunction useAutoPreset(props) {\n  var preset = props.preset,\n    scrollEnabledToggleThreshold = props.scrollEnabledToggleThreshold;\n  var _ref = scrollEnabledToggleThreshold || {},\n    _ref$percent = _ref.percent,\n    percent = _ref$percent === void 0 ? 0.92 : _ref$percent,\n    _ref$point = _ref.point,\n    point = _ref$point === void 0 ? 0 : _ref$point;\n  var scrollViewHeight = useRef(null);\n  var scrollViewContentHeight = useRef(null);\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    scrollEnabled = _useState2[0],\n    setScrollEnabled = _useState2[1];\n  function updateScrollState() {\n    if (scrollViewHeight.current === null || scrollViewContentHeight.current === null) return;\n    var contentFitsScreen = function () {\n      if (point) {\n        return scrollViewContentHeight.current < scrollViewHeight.current - point;\n      } else {\n        return scrollViewContentHeight.current < scrollViewHeight.current * percent;\n      }\n    }();\n    if (scrollEnabled && contentFitsScreen) setScrollEnabled(false);\n    if (!scrollEnabled && !contentFitsScreen) setScrollEnabled(true);\n  }\n  function onContentSizeChange(w, h) {\n    scrollViewContentHeight.current = h;\n    updateScrollState();\n  }\n  function onLayout(e) {\n    var height = e.nativeEvent.layout.height;\n    scrollViewHeight.current = height;\n    updateScrollState();\n  }\n  if (preset === \"auto\") updateScrollState();\n  return {\n    scrollEnabled: preset === \"auto\" ? scrollEnabled : true,\n    onContentSizeChange: onContentSizeChange,\n    onLayout: onLayout\n  };\n}\nfunction ScreenWithoutScrolling(props) {\n  var style = props.style,\n    contentContainerStyle = props.contentContainerStyle,\n    children = props.children;\n  return _jsx(View, {\n    style: [$outerStyle, style],\n    children: _jsx(View, {\n      style: [$innerStyle, contentContainerStyle],\n      children: children\n    })\n  });\n}\nfunction ScreenWithScrolling(props) {\n  var _ref2 = props,\n    children = _ref2.children,\n    _ref2$keyboardShouldP = _ref2.keyboardShouldPersistTaps,\n    keyboardShouldPersistTaps = _ref2$keyboardShouldP === void 0 ? \"handled\" : _ref2$keyboardShouldP,\n    contentContainerStyle = _ref2.contentContainerStyle,\n    ScrollViewProps = _ref2.ScrollViewProps,\n    style = _ref2.style;\n  var ref = useRef();\n  var _useAutoPreset = useAutoPreset(props),\n    scrollEnabled = _useAutoPreset.scrollEnabled,\n    _onContentSizeChange = _useAutoPreset.onContentSizeChange,\n    _onLayout = _useAutoPreset.onLayout;\n  useScrollToTop(ref);\n  return _jsx(ScrollView, _objectSpread(_objectSpread({\n    keyboardShouldPersistTaps: keyboardShouldPersistTaps,\n    scrollEnabled: scrollEnabled,\n    ref: ref\n  }, ScrollViewProps), {}, {\n    onLayout: function onLayout(e) {\n      _onLayout(e);\n      ScrollViewProps == null ? void 0 : ScrollViewProps.onLayout == null ? void 0 : ScrollViewProps.onLayout(e);\n    },\n    onContentSizeChange: function onContentSizeChange(w, h) {\n      _onContentSizeChange(w, h);\n      ScrollViewProps == null ? void 0 : ScrollViewProps.onContentSizeChange == null ? void 0 : ScrollViewProps.onContentSizeChange(w, h);\n    },\n    style: [$outerStyle, ScrollViewProps == null ? void 0 : ScrollViewProps.style, style],\n    contentContainerStyle: [$innerStyle, ScrollViewProps == null ? void 0 : ScrollViewProps.contentContainerStyle, contentContainerStyle],\n    children: children\n  }));\n}\nexport function Screen(props) {\n  var _props$backgroundColo = props.backgroundColor,\n    backgroundColor = _props$backgroundColo === void 0 ? colors.background : _props$backgroundColo,\n    KeyboardAvoidingViewProps = props.KeyboardAvoidingViewProps,\n    _props$keyboardOffset = props.keyboardOffset,\n    keyboardOffset = _props$keyboardOffset === void 0 ? 0 : _props$keyboardOffset,\n    safeAreaEdges = props.safeAreaEdges,\n    StatusBarProps = props.StatusBarProps,\n    _props$statusBarStyle = props.statusBarStyle,\n    statusBarStyle = _props$statusBarStyle === void 0 ? \"dark\" : _props$statusBarStyle;\n  var $containerInsets = useSafeAreaInsetsStyle(safeAreaEdges);\n  return _jsxs(View, {\n    style: [$containerStyle, {\n      backgroundColor: backgroundColor\n    }, $containerInsets],\n    children: [_jsx(StatusBar, _objectSpread({\n      style: statusBarStyle\n    }, StatusBarProps)), _jsx(KeyboardAvoidingView, _objectSpread(_objectSpread({\n      behavior: isIos ? \"padding\" : undefined,\n      keyboardVerticalOffset: keyboardOffset\n    }, KeyboardAvoidingViewProps), {}, {\n      style: [$keyboardAvoidingViewStyle, KeyboardAvoidingViewProps == null ? void 0 : KeyboardAvoidingViewProps.style],\n      children: isNonScrolling(props.preset) ? _jsx(ScreenWithoutScrolling, _objectSpread({}, props)) : _jsx(ScreenWithScrolling, _objectSpread({}, props))\n    }))]\n  });\n}\nvar $containerStyle = {\n  flex: 1,\n  height: \"100%\",\n  width: \"100%\"\n};\nvar $keyboardAvoidingViewStyle = {\n  flex: 1\n};\nvar $outerStyle = {\n  flex: 1,\n  height: \"100%\",\n  width: \"100%\"\n};\nvar $innerStyle = {\n  justifyContent: \"flex-start\",\n  alignItems: \"stretch\"\n};","map":{"version":3,"names":["useScrollToTop","StatusBar","React","useRef","useState","KeyboardAvoidingView","Platform","ScrollView","View","colors","useSafeAreaInsetsStyle","jsx","_jsx","jsxs","_jsxs","isIos","OS","isNonScrolling","preset","useAutoPreset","props","scrollEnabledToggleThreshold","_ref","_ref$percent","percent","_ref$point","point","scrollViewHeight","scrollViewContentHeight","_useState","_useState2","_slicedToArray","scrollEnabled","setScrollEnabled","updateScrollState","current","contentFitsScreen","onContentSizeChange","w","h","onLayout","e","height","nativeEvent","layout","ScreenWithoutScrolling","style","contentContainerStyle","children","$outerStyle","$innerStyle","ScreenWithScrolling","_ref2","_ref2$keyboardShouldP","keyboardShouldPersistTaps","ScrollViewProps","ref","_useAutoPreset","_objectSpread","Screen","_props$backgroundColo","backgroundColor","background","KeyboardAvoidingViewProps","_props$keyboardOffset","keyboardOffset","safeAreaEdges","StatusBarProps","_props$statusBarStyle","statusBarStyle","$containerInsets","$containerStyle","behavior","undefined","keyboardVerticalOffset","$keyboardAvoidingViewStyle","flex","width","justifyContent","alignItems"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/components/Screen.tsx"],"sourcesContent":["import { useScrollToTop } from \"@react-navigation/native\"\nimport { StatusBar, StatusBarProps } from \"expo-status-bar\"\nimport React, { useRef, useState } from \"react\"\nimport {\n  KeyboardAvoidingView,\n  KeyboardAvoidingViewProps,\n  LayoutChangeEvent,\n  Platform,\n  ScrollView,\n  ScrollViewProps,\n  StyleProp,\n  View,\n  ViewStyle,\n} from \"react-native\"\nimport { colors } from \"../theme\"\nimport { ExtendedEdge, useSafeAreaInsetsStyle } from \"../utils/useSafeAreaInsetsStyle\"\n\ninterface BaseScreenProps {\n  /**\n   * Children components.\n   */\n  children?: React.ReactNode\n  /**\n   * Style for the outer content container useful for padding & margin.\n   */\n  style?: StyleProp<ViewStyle>\n  /**\n   * Style for the inner content container useful for padding & margin.\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>\n  /**\n   * Override the default edges for the safe area.\n   */\n  safeAreaEdges?: ExtendedEdge[]\n  /**\n   * Background color\n   */\n  backgroundColor?: string\n  /**\n   * Status bar setting. Defaults to dark.\n   */\n  statusBarStyle?: \"light\" | \"dark\"\n  /**\n   * By how much should we offset the keyboard? Defaults to 0.\n   */\n  keyboardOffset?: number\n  /**\n   * Pass any additional props directly to the StatusBar component.\n   */\n  StatusBarProps?: StatusBarProps\n  /**\n   * Pass any additional props directly to the KeyboardAvoidingView component.\n   */\n  KeyboardAvoidingViewProps?: KeyboardAvoidingViewProps\n}\n\ninterface FixedScreenProps extends BaseScreenProps {\n  preset?: \"fixed\"\n}\ninterface ScrollScreenProps extends BaseScreenProps {\n  preset?: \"scroll\"\n  /**\n   * Should keyboard persist on screen tap. Defaults to handled.\n   * Only applies to scroll preset.\n   */\n  keyboardShouldPersistTaps?: \"handled\" | \"always\" | \"never\"\n  /**\n   * Pass any additional props directly to the ScrollView component.\n   */\n  ScrollViewProps?: ScrollViewProps\n}\n\ninterface AutoScreenProps extends Omit<ScrollScreenProps, \"preset\"> {\n  preset?: \"auto\"\n  /**\n   * Threshold to trigger the automatic disabling/enabling of scroll ability.\n   * Defaults to `{ percent: 0.92 }`.\n   */\n  scrollEnabledToggleThreshold?: { percent?: number; point?: number }\n}\n\nexport type ScreenProps = ScrollScreenProps | FixedScreenProps | AutoScreenProps\n\nconst isIos = Platform.OS === \"ios\"\n\nfunction isNonScrolling(preset?: ScreenProps[\"preset\"]) {\n  return !preset || preset === \"fixed\"\n}\n\nfunction useAutoPreset(props: AutoScreenProps) {\n  const { preset, scrollEnabledToggleThreshold } = props\n  const { percent = 0.92, point = 0 } = scrollEnabledToggleThreshold || {}\n\n  const scrollViewHeight = useRef(null)\n  const scrollViewContentHeight = useRef(null)\n  const [scrollEnabled, setScrollEnabled] = useState(true)\n\n  function updateScrollState() {\n    if (scrollViewHeight.current === null || scrollViewContentHeight.current === null) return\n\n    // check whether content fits the screen then toggle scroll state according to it\n    const contentFitsScreen = (function () {\n      if (point) {\n        return scrollViewContentHeight.current < scrollViewHeight.current - point\n      } else {\n        return scrollViewContentHeight.current < scrollViewHeight.current * percent\n      }\n    })()\n\n    // content is less than the size of the screen, so we can disable scrolling\n    if (scrollEnabled && contentFitsScreen) setScrollEnabled(false)\n\n    // content is greater than the size of the screen, so let's enable scrolling\n    if (!scrollEnabled && !contentFitsScreen) setScrollEnabled(true)\n  }\n\n  function onContentSizeChange(w: number, h: number) {\n    // update scroll-view content height\n    scrollViewContentHeight.current = h\n    updateScrollState()\n  }\n\n  function onLayout(e: LayoutChangeEvent) {\n    const { height } = e.nativeEvent.layout\n    // update scroll-view  height\n    scrollViewHeight.current = height\n    updateScrollState()\n  }\n\n  // update scroll state on every render\n  if (preset === \"auto\") updateScrollState()\n\n  return {\n    scrollEnabled: preset === \"auto\" ? scrollEnabled : true,\n    onContentSizeChange,\n    onLayout,\n  }\n}\n\nfunction ScreenWithoutScrolling(props: ScreenProps) {\n  const { style, contentContainerStyle, children } = props\n  return (\n    <View style={[$outerStyle, style]}>\n      <View style={[$innerStyle, contentContainerStyle]}>{children}</View>\n    </View>\n  )\n}\n\nfunction ScreenWithScrolling(props: ScreenProps) {\n  const {\n    children,\n    keyboardShouldPersistTaps = \"handled\",\n    contentContainerStyle,\n    ScrollViewProps,\n    style,\n  } = props as ScrollScreenProps\n\n  const ref = useRef<ScrollView>()\n\n  const { scrollEnabled, onContentSizeChange, onLayout } = useAutoPreset(props as AutoScreenProps)\n\n  // Add native behavior of pressing the active tab to scroll to the top of the content\n  // More info at: https://reactnavigation.org/docs/use-scroll-to-top/\n  useScrollToTop(ref)\n\n  return (\n    <ScrollView\n      {...{ keyboardShouldPersistTaps, scrollEnabled, ref }}\n      {...ScrollViewProps}\n      onLayout={(e) => {\n        onLayout(e)\n        ScrollViewProps?.onLayout?.(e)\n      }}\n      onContentSizeChange={(w: number, h: number) => {\n        onContentSizeChange(w, h)\n        ScrollViewProps?.onContentSizeChange?.(w, h)\n      }}\n      style={[$outerStyle, ScrollViewProps?.style, style]}\n      contentContainerStyle={[\n        $innerStyle,\n        ScrollViewProps?.contentContainerStyle,\n        contentContainerStyle,\n      ]}\n    >\n      {children}\n    </ScrollView>\n  )\n}\n\nexport function Screen(props: ScreenProps) {\n  const {\n    backgroundColor = colors.background,\n    KeyboardAvoidingViewProps,\n    keyboardOffset = 0,\n    safeAreaEdges,\n    StatusBarProps,\n    statusBarStyle = \"dark\",\n  } = props\n\n  const $containerInsets = useSafeAreaInsetsStyle(safeAreaEdges)\n\n  return (\n    <View style={[$containerStyle, { backgroundColor }, $containerInsets]}>\n      <StatusBar style={statusBarStyle} {...StatusBarProps} />\n\n      <KeyboardAvoidingView\n        behavior={isIos ? \"padding\" : undefined}\n        keyboardVerticalOffset={keyboardOffset}\n        {...KeyboardAvoidingViewProps}\n        style={[$keyboardAvoidingViewStyle, KeyboardAvoidingViewProps?.style]}\n      >\n        {isNonScrolling(props.preset) ? (\n          <ScreenWithoutScrolling {...props} />\n        ) : (\n          <ScreenWithScrolling {...props} />\n        )}\n      </KeyboardAvoidingView>\n    </View>\n  )\n}\n\nconst $containerStyle: ViewStyle = {\n  flex: 1,\n  height: \"100%\",\n  width: \"100%\",\n}\n\nconst $keyboardAvoidingViewStyle: ViewStyle = {\n  flex: 1,\n}\n\nconst $outerStyle: ViewStyle = {\n  flex: 1,\n  height: \"100%\",\n  width: \"100%\",\n}\n\nconst $innerStyle: ViewStyle = {\n  justifyContent: \"flex-start\",\n  alignItems: \"stretch\",\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}