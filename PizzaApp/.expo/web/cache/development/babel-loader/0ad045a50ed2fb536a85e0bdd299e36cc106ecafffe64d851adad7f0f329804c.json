{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nif (__DEV__) {\n  require(\"./devtools/ReactotronConfig.ts\");\n}\nimport \"./i18n\";\nimport \"./utils/ignoreWarnings\";\nimport { useFonts } from \"expo-font\";\nimport React from \"react\";\nimport { initialWindowMetrics, SafeAreaProvider } from \"react-native-safe-area-context\";\nimport * as Linking from \"expo-linking\";\nimport { useInitialRootStore } from \"./models\";\nimport { AppNavigator, useNavigationPersistence } from \"./navigators\";\nimport { ErrorBoundary } from \"./screens/ErrorScreen/ErrorBoundary\";\nimport * as storage from \"./utils/storage\";\nimport { customFontsToLoad } from \"./theme\";\nimport Config from \"./config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\";\nvar prefix = Linking.createURL(\"/\");\nvar config = {\n  screens: {\n    Login: {\n      path: \"\"\n    },\n    Welcome: \"welcome\",\n    Demo: {\n      screens: {\n        DemoShowroom: {\n          path: \"showroom/:queryIndex?/:itemIndex?\"\n        },\n        DemoDebug: \"debug\",\n        DemoPodcastList: \"podcast\",\n        DemoCommunity: \"community\"\n      }\n    }\n  }\n};\nfunction App(props) {\n  var hideSplashScreen = props.hideSplashScreen;\n  var _useNavigationPersist = useNavigationPersistence(storage, NAVIGATION_PERSISTENCE_KEY),\n    initialNavigationState = _useNavigationPersist.initialNavigationState,\n    onNavigationStateChange = _useNavigationPersist.onNavigationStateChange,\n    isNavigationStateRestored = _useNavigationPersist.isRestored;\n  var _useFonts = useFonts(customFontsToLoad),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    areFontsLoaded = _useFonts2[0];\n  var _useInitialRootStore = useInitialRootStore(function () {\n      setTimeout(hideSplashScreen, 500);\n    }),\n    rehydrated = _useInitialRootStore.rehydrated;\n  if (!rehydrated || !isNavigationStateRestored || !areFontsLoaded) return null;\n  var linking = {\n    prefixes: [prefix],\n    config: config\n  };\n  return _jsx(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics,\n    children: _jsx(ErrorBoundary, {\n      catchErrors: Config.catchErrors,\n      children: _jsx(AppNavigator, {\n        linking: linking,\n        initialState: initialNavigationState,\n        onStateChange: onNavigationStateChange\n      })\n    })\n  });\n}\nexport default App;","map":{"version":3,"names":["__DEV__","require","useFonts","React","initialWindowMetrics","SafeAreaProvider","Linking","useInitialRootStore","AppNavigator","useNavigationPersistence","ErrorBoundary","storage","customFontsToLoad","Config","jsx","_jsx","NAVIGATION_PERSISTENCE_KEY","prefix","createURL","config","screens","Login","path","Welcome","Demo","DemoShowroom","DemoDebug","DemoPodcastList","DemoCommunity","App","props","hideSplashScreen","_useNavigationPersist","initialNavigationState","onNavigationStateChange","isNavigationStateRestored","isRestored","_useFonts","_useFonts2","_slicedToArray","areFontsLoaded","_useInitialRootStore","setTimeout","rehydrated","linking","prefixes","initialMetrics","children","catchErrors","initialState","onStateChange"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/app.tsx"],"sourcesContent":["/* eslint-disable import/first */\n/**\n * Welcome to the main entry point of the app. In this file, we'll\n * be kicking off our app.\n *\n * Most of this file is boilerplate and you shouldn't need to modify\n * it very often. But take some time to look through and understand\n * what is going on here.\n *\n * The app navigation resides in ./app/navigators, so head over there\n * if you're interested in adding screens and navigators.\n */\nif (__DEV__) {\n  // Load Reactotron configuration in development. We don't want to\n  // include this in our production bundle, so we are using `if (__DEV__)`\n  // to only execute this in development.\n  require(\"./devtools/ReactotronConfig.ts\")\n}\nimport \"./i18n\"\nimport \"./utils/ignoreWarnings\"\nimport { useFonts } from \"expo-font\"\nimport React from \"react\"\nimport { initialWindowMetrics, SafeAreaProvider } from \"react-native-safe-area-context\"\nimport * as Linking from \"expo-linking\"\nimport { useInitialRootStore } from \"./models\"\nimport { AppNavigator, useNavigationPersistence } from \"./navigators\"\nimport { ErrorBoundary } from \"./screens/ErrorScreen/ErrorBoundary\"\nimport * as storage from \"./utils/storage\"\nimport { customFontsToLoad } from \"./theme\"\nimport Config from \"./config\"\n\nexport const NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\"\n\n// Web linking configuration\nconst prefix = Linking.createURL(\"/\")\nconst config = {\n  screens: {\n    Login: {\n      path: \"\",\n    },\n    Welcome: \"welcome\",\n    Demo: {\n      screens: {\n        DemoShowroom: {\n          path: \"showroom/:queryIndex?/:itemIndex?\",\n        },\n        DemoDebug: \"debug\",\n        DemoPodcastList: \"podcast\",\n        DemoCommunity: \"community\",\n      },\n    },\n  },\n}\n\ninterface AppProps {\n  hideSplashScreen: () => Promise<void>\n}\n\n/**\n * This is the root component of our app.\n */\nfunction App(props: AppProps) {\n  const { hideSplashScreen } = props\n  const {\n    initialNavigationState,\n    onNavigationStateChange,\n    isRestored: isNavigationStateRestored,\n  } = useNavigationPersistence(storage, NAVIGATION_PERSISTENCE_KEY)\n\n  const [areFontsLoaded] = useFonts(customFontsToLoad)\n\n  const { rehydrated } = useInitialRootStore(() => {\n    // This runs after the root store has been initialized and rehydrated.\n\n    // If your initialization scripts run very fast, it's good to show the splash screen for just a bit longer to prevent flicker.\n    // Slightly delaying splash screen hiding for better UX; can be customized or removed as needed,\n    // Note: (vanilla Android) The splash-screen will not appear if you launch your app via the terminal or Android Studio. Kill the app and launch it normally by tapping on the launcher icon. https://stackoverflow.com/a/69831106\n    // Note: (vanilla iOS) You might notice the splash-screen logo change size. This happens in debug/development mode. Try building the app for release.\n    setTimeout(hideSplashScreen, 500)\n  })\n\n  // Before we show the app, we have to wait for our state to be ready.\n  // In the meantime, don't render anything. This will be the background\n  // color set in native by rootView's background color.\n  // In iOS: application:didFinishLaunchingWithOptions:\n  // In Android: https://stackoverflow.com/a/45838109/204044\n  // You can replace with your own loading component if you wish.\n  if (!rehydrated || !isNavigationStateRestored || !areFontsLoaded) return null\n\n  const linking = {\n    prefixes: [prefix],\n    config,\n  }\n\n  // otherwise, we're ready to render the app\n  return (\n    <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n      <ErrorBoundary catchErrors={Config.catchErrors}>\n        <AppNavigator\n          linking={linking}\n          initialState={initialNavigationState}\n          onStateChange={onNavigationStateChange}\n        />\n      </ErrorBoundary>\n    </SafeAreaProvider>\n  )\n}\n\nexport default App\n"],"mappings":";AAYA,IAAIA,OAAO,EAAE;EAIXC,OAAO,iCAAiC,CAAC;AAC3C;AACA;AACA;AACA,SAASC,QAAQ,QAAQ,WAAW;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,EAAEC,gBAAgB,QAAQ,gCAAgC;AACvF,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,SAASC,mBAAmB;AAC5B,SAASC,YAAY,EAAEC,wBAAwB;AAC/C,SAASC,aAAa;AACtB,OAAO,KAAKC,OAAO;AACnB,SAASC,iBAAiB;AAC1B,OAAOC,MAAM;AAAgB,SAAAC,GAAA,IAAAC,IAAA;AAE7B,OAAO,IAAMC,0BAA0B,GAAG,kBAAkB;AAG5D,IAAMC,MAAM,GAAGX,OAAO,CAACY,SAAS,CAAC,GAAG,CAAC;AACrC,IAAMC,MAAM,GAAG;EACbC,OAAO,EAAE;IACPC,KAAK,EAAE;MACLC,IAAI,EAAE;IACR,CAAC;IACDC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE;MACJJ,OAAO,EAAE;QACPK,YAAY,EAAE;UACZH,IAAI,EAAE;QACR,CAAC;QACDI,SAAS,EAAE,OAAO;QAClBC,eAAe,EAAE,SAAS;QAC1BC,aAAa,EAAE;MACjB;IACF;EACF;AACF,CAAC;AASD,SAASC,GAAGA,CAACC,KAAe,EAAE;EAC5B,IAAQC,gBAAgB,GAAKD,KAAK,CAA1BC,gBAAgB;EACxB,IAAAC,qBAAA,GAIIvB,wBAAwB,CAACE,OAAO,EAAEK,0BAA0B,CAAC;IAH/DiB,sBAAsB,GAAAD,qBAAA,CAAtBC,sBAAsB;IACtBC,uBAAuB,GAAAF,qBAAA,CAAvBE,uBAAuB;IACXC,yBAAyB,GAAAH,qBAAA,CAArCI,UAAU;EAGZ,IAAAC,SAAA,GAAyBnC,QAAQ,CAACU,iBAAiB,CAAC;IAAA0B,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7CG,cAAc,GAAAF,UAAA;EAErB,IAAAG,oBAAA,GAAuBlC,mBAAmB,CAAC,YAAM;MAO/CmC,UAAU,CAACX,gBAAgB,EAAE,GAAG,CAAC;IACnC,CAAC,CAAC;IARMY,UAAU,GAAAF,oBAAA,CAAVE,UAAU;EAgBlB,IAAI,CAACA,UAAU,IAAI,CAACR,yBAAyB,IAAI,CAACK,cAAc,EAAE,OAAO,IAAI;EAE7E,IAAMI,OAAO,GAAG;IACdC,QAAQ,EAAE,CAAC5B,MAAM,CAAC;IAClBE,MAAM,EAANA;EACF,CAAC;EAGD,OACEJ,IAAA,CAACV,gBAAgB;IAACyC,cAAc,EAAE1C,oBAAqB;IAAA2C,QAAA,EACrDhC,IAAA,CAACL,aAAa;MAACsC,WAAW,EAAEnC,MAAM,CAACmC,WAAY;MAAAD,QAAA,EAC7ChC,IAAA,CAACP,YAAY;QACXoC,OAAO,EAAEA,OAAQ;QACjBK,YAAY,EAAEhB,sBAAuB;QACrCiB,aAAa,EAAEhB;MAAwB,CACxC;IAAC,CACW;EAAC,CACA,CAAC;AAEvB;AAEA,eAAeL,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}