{"ast":null,"code":"import * as Localization from \"expo-localization\";\nimport i18n from \"i18n-js\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport en from \"./en\";\nimport ar from \"./ar\";\nimport ko from \"./ko\";\nimport fr from \"./fr\";\ni18n.fallbacks = true;\ni18n.translations = {\n  ar: ar,\n  en: en,\n  \"en-US\": en,\n  ko: ko,\n  fr: fr\n};\nvar locales = Localization.getLocales();\nvar preferredLanguage = locales[0] || {\n  languageTag: \"en-US\",\n  textDirection: \"ltr\"\n};\ni18n.locale = preferredLanguage.languageTag;\nexport var isRTL = preferredLanguage.textDirection === \"rtl\";\nI18nManager.allowRTL(isRTL);\nI18nManager.forceRTL(isRTL);","map":{"version":3,"names":["Localization","i18n","I18nManager","en","ar","ko","fr","fallbacks","translations","locales","getLocales","preferredLanguage","languageTag","textDirection","locale","isRTL","allowRTL","forceRTL"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/i18n/i18n.ts"],"sourcesContent":["import * as Localization from \"expo-localization\"\nimport i18n from \"i18n-js\"\nimport { I18nManager } from \"react-native\"\n\n// if English isn't your default language, move Translations to the appropriate language file.\nimport en, { Translations } from \"./en\"\nimport ar from \"./ar\"\nimport ko from \"./ko\"\nimport fr from \"./fr\"\n\ni18n.fallbacks = true\n/**\n * we need always include \"*-US\" for some valid language codes because when you change the system language,\n * the language code is the suffixed with \"-US\". i.e. if a device is set to English (\"en\"),\n * if you change to another language and then return to English language code is now \"en-US\".\n */\ni18n.translations = { ar, en, \"en-US\": en, ko, fr }\n\nconst locales = Localization.getLocales() // This method is guaranteed to return at least one array item.\n// The preferred language is the first element in the array, however, we fallback to en-US, especially for tests.\nconst preferredLanguage:\n  | Localization.Locale\n  | { languageTag: string; textDirection: \"ltr\" | \"rtl\" } = locales[0] || {\n  languageTag: \"en-US\",\n  textDirection: \"ltr\",\n}\ni18n.locale = preferredLanguage.languageTag\n\n// handle RTL languages\nexport const isRTL = preferredLanguage.textDirection === \"rtl\"\nI18nManager.allowRTL(isRTL)\nI18nManager.forceRTL(isRTL)\n\n/**\n * Builds up valid keypaths for translations.\n */\nexport type TxKeyPath = RecursiveKeyOf<Translations>\n\n// via: https://stackoverflow.com/a/65333050\ntype RecursiveKeyOf<TObj extends object> = {\n  [TKey in keyof TObj & (string | number)]: RecursiveKeyOfHandleValue<TObj[TKey], `${TKey}`>\n}[keyof TObj & (string | number)]\n\ntype RecursiveKeyOfInner<TObj extends object> = {\n  [TKey in keyof TObj & (string | number)]: RecursiveKeyOfHandleValue<\n    TObj[TKey],\n    `['${TKey}']` | `.${TKey}`\n  >\n}[keyof TObj & (string | number)]\n\ntype RecursiveKeyOfHandleValue<TValue, Text extends string> = TValue extends any[]\n  ? Text\n  : TValue extends object\n  ? Text | `${Text}${RecursiveKeyOfInner<TValue>}`\n  : Text\n"],"mappings":"AAAA,OAAO,KAAKA,YAAY,MAAM,mBAAmB;AACjD,OAAOC,IAAI,MAAM,SAAS;AAAA,OAAAC,WAAA;AAI1B,OAAOC,EAAE;AACT,OAAOC,EAAE;AACT,OAAOC,EAAE;AACT,OAAOC,EAAE;AAETL,IAAI,CAACM,SAAS,GAAG,IAAI;AAMrBN,IAAI,CAACO,YAAY,GAAG;EAAEJ,EAAE,EAAFA,EAAE;EAAED,EAAE,EAAFA,EAAE;EAAE,OAAO,EAAEA,EAAE;EAAEE,EAAE,EAAFA,EAAE;EAAEC,EAAE,EAAFA;AAAG,CAAC;AAEnD,IAAMG,OAAO,GAAGT,YAAY,CAACU,UAAU,CAAC,CAAC;AAEzC,IAAMC,iBAEmD,GAAGF,OAAO,CAAC,CAAC,CAAC,IAAI;EACxEG,WAAW,EAAE,OAAO;EACpBC,aAAa,EAAE;AACjB,CAAC;AACDZ,IAAI,CAACa,MAAM,GAAGH,iBAAiB,CAACC,WAAW;AAG3C,OAAO,IAAMG,KAAK,GAAGJ,iBAAiB,CAACE,aAAa,KAAK,KAAK;AAC9DX,WAAW,CAACc,QAAQ,CAACD,KAAK,CAAC;AAC3Bb,WAAW,CAACe,QAAQ,CAACF,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}