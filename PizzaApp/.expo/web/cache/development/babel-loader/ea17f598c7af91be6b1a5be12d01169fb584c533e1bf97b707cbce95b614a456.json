{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect, useRef } from \"react\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { createNavigationContainerRef } from \"@react-navigation/native\";\nimport Config from \"../config\";\nimport { useIsMounted } from \"../utils/useIsMounted\";\nexport var navigationRef = createNavigationContainerRef();\nexport function getActiveRouteName(state) {\n  var route = state.routes[state.index];\n  if (!route.state) return route.name;\n  return getActiveRouteName(route.state);\n}\nexport function useBackButtonHandler(canExit) {\n  if (Platform.OS === \"ios\") return;\n  var canExitRef = useRef(canExit);\n  useEffect(function () {\n    canExitRef.current = canExit;\n  }, [canExit]);\n  useEffect(function () {\n    var onBackPress = function onBackPress() {\n      if (!navigationRef.isReady()) {\n        return false;\n      }\n      var routeName = getActiveRouteName(navigationRef.getRootState());\n      if (canExitRef.current(routeName)) {\n        BackHandler.exitApp();\n        return true;\n      }\n      if (navigationRef.canGoBack()) {\n        navigationRef.goBack();\n        return true;\n      }\n      return false;\n    };\n    BackHandler.addEventListener(\"hardwareBackPress\", onBackPress);\n    return function () {\n      return BackHandler.removeEventListener(\"hardwareBackPress\", onBackPress);\n    };\n  }, []);\n}\nfunction navigationRestoredDefaultState(persistNavigation) {\n  if (persistNavigation === \"always\") return false;\n  if (persistNavigation === \"dev\" && __DEV__) return false;\n  if (persistNavigation === \"prod\" && !__DEV__) return false;\n  return true;\n}\nexport function useNavigationPersistence(storage, persistenceKey) {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    initialNavigationState = _useState2[0],\n    setInitialNavigationState = _useState2[1];\n  var isMounted = useIsMounted();\n  var initNavState = navigationRestoredDefaultState(Config.persistNavigation);\n  var _useState3 = useState(initNavState),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isRestored = _useState4[0],\n    setIsRestored = _useState4[1];\n  var routeNameRef = useRef();\n  var onNavigationStateChange = function onNavigationStateChange(state) {\n    var previousRouteName = routeNameRef.current;\n    var currentRouteName = getActiveRouteName(state);\n    if (previousRouteName !== currentRouteName) {\n      if (__DEV__) {\n        console.tron.log(currentRouteName);\n      }\n    }\n    routeNameRef.current = currentRouteName;\n    storage.save(persistenceKey, state);\n  };\n  var restoreState = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var state = yield storage.load(persistenceKey);\n        if (state) setInitialNavigationState(state);\n      } finally {\n        if (isMounted()) setIsRestored(true);\n      }\n    });\n    return function restoreState() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    if (!isRestored) restoreState();\n  }, [isRestored]);\n  return {\n    onNavigationStateChange: onNavigationStateChange,\n    restoreState: restoreState,\n    isRestored: isRestored,\n    initialNavigationState: initialNavigationState\n  };\n}\nexport function navigate() {\n  if (navigationRef.isReady()) {\n    navigationRef.navigate.apply(navigationRef, arguments);\n  }\n}\nexport function goBack() {\n  if (navigationRef.isReady() && navigationRef.canGoBack()) {\n    navigationRef.goBack();\n  }\n}\nexport function resetRoot() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    index: 0,\n    routes: []\n  };\n  if (navigationRef.isReady()) {\n    navigationRef.resetRoot(state);\n  }\n}","map":{"version":3,"names":["useState","useEffect","useRef","BackHandler","Platform","createNavigationContainerRef","Config","useIsMounted","navigationRef","getActiveRouteName","state","route","routes","index","name","useBackButtonHandler","canExit","OS","canExitRef","current","onBackPress","isReady","routeName","getRootState","exitApp","canGoBack","goBack","addEventListener","removeEventListener","navigationRestoredDefaultState","persistNavigation","__DEV__","useNavigationPersistence","storage","persistenceKey","_useState","_useState2","_slicedToArray","initialNavigationState","setInitialNavigationState","isMounted","initNavState","_useState3","_useState4","isRestored","setIsRestored","routeNameRef","onNavigationStateChange","previousRouteName","currentRouteName","console","tron","log","save","restoreState","_ref","_asyncToGenerator","load","apply","arguments","navigate","resetRoot","length","undefined"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/navigators/navigationUtilities.ts"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\"\nimport { BackHandler, Platform } from \"react-native\"\nimport { NavigationState, createNavigationContainerRef } from \"@react-navigation/native\"\nimport Config from \"../config\"\nimport type { PersistNavigationConfig } from \"../config/config.base\"\nimport { useIsMounted } from \"../utils/useIsMounted\"\nimport type { AppStackParamList, NavigationProps } from \"./AppNavigator\"\n\nimport * as storage from \"../utils/storage\"\n\ntype Storage = typeof storage\n\n/**\n * Reference to the root App Navigator.\n *\n * If needed, you can use this to access the navigation object outside of a\n * `NavigationContainer` context. However, it's recommended to use the `useNavigation` hook whenever possible.\n * @see https://reactnavigation.org/docs/navigating-without-navigation-prop/\n *\n * The types on this reference will only let you reference top level navigators. If you have\n * nested navigators, you'll need to use the `useNavigation` with the stack navigator's ParamList type.\n */\nexport const navigationRef = createNavigationContainerRef<AppStackParamList>()\n\n/**\n * Gets the current screen from any navigation state.\n */\nexport function getActiveRouteName(\n  state: ReturnType<typeof navigationRef.getRootState>,\n): keyof AppStackParamList {\n  const route = state.routes[state.index]\n\n  // Found the active route -- return the name\n  if (!route.state) return route.name as keyof AppStackParamList\n\n  // Recursive call to deal with nested routers\n  return getActiveRouteName(route.state as NavigationState<AppStackParamList>)\n}\n\n/**\n * Hook that handles Android back button presses and forwards those on to\n * the navigation or allows exiting the app.\n */\nexport function useBackButtonHandler(canExit: (routeName: string) => boolean) {\n  // ignore if iOS ... no back button!\n  if (Platform.OS === \"ios\") return\n\n  // The reason we're using a ref here is because we need to be able\n  // to update the canExit function without re-setting up all the listeners\n  const canExitRef = useRef(canExit)\n\n  useEffect(() => {\n    canExitRef.current = canExit\n  }, [canExit])\n\n  useEffect(() => {\n    // We'll fire this when the back button is pressed on Android.\n    const onBackPress = () => {\n      if (!navigationRef.isReady()) {\n        return false\n      }\n\n      // grab the current route\n      const routeName = getActiveRouteName(navigationRef.getRootState())\n\n      // are we allowed to exit?\n      if (canExitRef.current(routeName)) {\n        // exit and let the system know we've handled the event\n        BackHandler.exitApp()\n        return true\n      }\n\n      // we can't exit, so let's turn this into a back action\n      if (navigationRef.canGoBack()) {\n        navigationRef.goBack()\n        return true\n      }\n\n      return false\n    }\n\n    // Subscribe when we come to life\n    BackHandler.addEventListener(\"hardwareBackPress\", onBackPress)\n\n    // Unsubscribe when we're done\n    return () => BackHandler.removeEventListener(\"hardwareBackPress\", onBackPress)\n  }, [])\n}\n\n/**\n * This helper function will determine whether we should enable navigation persistence\n * based on a config setting and the __DEV__ environment (dev or prod).\n */\nfunction navigationRestoredDefaultState(persistNavigation: PersistNavigationConfig) {\n  if (persistNavigation === \"always\") return false\n  if (persistNavigation === \"dev\" && __DEV__) return false\n  if (persistNavigation === \"prod\" && !__DEV__) return false\n\n  // all other cases, disable restoration by returning true\n  return true\n}\n\n/**\n * Custom hook for persisting navigation state.\n */\nexport function useNavigationPersistence(storage: Storage, persistenceKey: string) {\n  const [initialNavigationState, setInitialNavigationState] =\n    useState<NavigationProps[\"initialState\"]>()\n  const isMounted = useIsMounted()\n\n  const initNavState = navigationRestoredDefaultState(Config.persistNavigation)\n  const [isRestored, setIsRestored] = useState(initNavState)\n\n  const routeNameRef = useRef<keyof AppStackParamList | undefined>()\n\n  const onNavigationStateChange: NavigationProps[\"onStateChange\"] = (state) => {\n    const previousRouteName = routeNameRef.current\n    const currentRouteName = getActiveRouteName(state)\n\n    if (previousRouteName !== currentRouteName) {\n      // track screens.\n      if (__DEV__) {\n        console.tron.log(currentRouteName)\n      }\n    }\n\n    // Save the current route name for later comparison\n    routeNameRef.current = currentRouteName\n\n    // Persist state to storage\n    storage.save(persistenceKey, state)\n  }\n\n  const restoreState = async () => {\n    try {\n      const state = (await storage.load(persistenceKey)) as NavigationProps[\"initialState\"] | null\n      if (state) setInitialNavigationState(state)\n    } finally {\n      if (isMounted()) setIsRestored(true)\n    }\n  }\n\n  useEffect(() => {\n    if (!isRestored) restoreState()\n  }, [isRestored])\n\n  return { onNavigationStateChange, restoreState, isRestored, initialNavigationState }\n}\n\n/**\n * use this to navigate without the navigation\n * prop. If you have access to the navigation prop, do not use this.\n * @see https://reactnavigation.org/docs/navigating-without-navigation-prop/\n */\nexport function navigate(...args: Parameters<typeof navigationRef.navigate>) {\n  if (navigationRef.isReady()) {\n    navigationRef.navigate(...args)\n  }\n}\n\n/**\n * This function is used to go back in a navigation stack, if it's possible to go back.\n * If the navigation stack can't go back, nothing happens.\n * The navigationRef variable is a React ref that references a navigation object.\n * The navigationRef variable is set in the App component.\n */\nexport function goBack() {\n  if (navigationRef.isReady() && navigationRef.canGoBack()) {\n    navigationRef.goBack()\n  }\n}\n\n/**\n * resetRoot will reset the root navigation state to the given params.\n */\nexport function resetRoot(\n  state: Parameters<typeof navigationRef.resetRoot>[0] = { index: 0, routes: [] },\n) {\n  if (navigationRef.isReady()) {\n    navigationRef.resetRoot(state)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}