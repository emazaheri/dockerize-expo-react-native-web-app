{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"tx\", \"text\", \"txOptions\", \"style\", \"pressedStyle\", \"textStyle\", \"pressedTextStyle\", \"children\", \"RightAccessory\", \"LeftAccessory\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from \"react\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { colors, spacing, typography } from \"../theme\";\nimport { Text } from \"./Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Button(props) {\n  var tx = props.tx,\n    text = props.text,\n    txOptions = props.txOptions,\n    $viewStyleOverride = props.style,\n    $pressedViewStyleOverride = props.pressedStyle,\n    $textStyleOverride = props.textStyle,\n    $pressedTextStyleOverride = props.pressedTextStyle,\n    _children = props.children,\n    RightAccessory = props.RightAccessory,\n    LeftAccessory = props.LeftAccessory,\n    rest = _objectWithoutProperties(props, _excluded);\n  var preset = $viewPresets[props.preset] ? props.preset : \"default\";\n  function $viewStyle(_ref) {\n    var pressed = _ref.pressed;\n    return [$viewPresets[preset], $viewStyleOverride, !!pressed && [$pressedViewPresets[preset], $pressedViewStyleOverride]];\n  }\n  function $textStyle(_ref2) {\n    var pressed = _ref2.pressed;\n    return [$textPresets[preset], $textStyleOverride, !!pressed && [$pressedTextPresets[preset], $pressedTextStyleOverride]];\n  }\n  return _jsx(Pressable, _objectSpread(_objectSpread({\n    style: $viewStyle,\n    accessibilityRole: \"button\"\n  }, rest), {}, {\n    children: function children(state) {\n      return _jsxs(_Fragment, {\n        children: [!!LeftAccessory && _jsx(LeftAccessory, {\n          style: $leftAccessoryStyle,\n          pressableState: state\n        }), _jsx(Text, {\n          tx: tx,\n          text: text,\n          txOptions: txOptions,\n          style: $textStyle(state),\n          children: _children\n        }), !!RightAccessory && _jsx(RightAccessory, {\n          style: $rightAccessoryStyle,\n          pressableState: state\n        })]\n      });\n    }\n  }));\n}\nvar $baseViewStyle = {\n  minHeight: 56,\n  borderRadius: 4,\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  flexDirection: \"row\",\n  paddingVertical: spacing.sm,\n  paddingHorizontal: spacing.sm,\n  overflow: \"hidden\"\n};\nvar $baseTextStyle = {\n  fontSize: 16,\n  lineHeight: 20,\n  fontFamily: typography.primary.medium,\n  textAlign: \"center\",\n  flexShrink: 1,\n  flexGrow: 0,\n  zIndex: 2\n};\nvar $rightAccessoryStyle = {\n  marginStart: spacing.xs,\n  zIndex: 1\n};\nvar $leftAccessoryStyle = {\n  marginEnd: spacing.xs,\n  zIndex: 1\n};\nvar $viewPresets = {\n  default: [$baseViewStyle, {\n    borderWidth: 1,\n    borderColor: colors.palette.neutral400,\n    backgroundColor: colors.palette.neutral100\n  }],\n  filled: [$baseViewStyle, {\n    backgroundColor: colors.palette.neutral300\n  }],\n  reversed: [$baseViewStyle, {\n    backgroundColor: colors.palette.neutral800\n  }]\n};\nvar $textPresets = {\n  default: $baseTextStyle,\n  filled: $baseTextStyle,\n  reversed: [$baseTextStyle, {\n    color: colors.palette.neutral100\n  }]\n};\nvar $pressedViewPresets = {\n  default: {\n    backgroundColor: colors.palette.neutral200\n  },\n  filled: {\n    backgroundColor: colors.palette.neutral400\n  },\n  reversed: {\n    backgroundColor: colors.palette.neutral700\n  }\n};\nvar $pressedTextPresets = {\n  default: {\n    opacity: 0.9\n  },\n  filled: {\n    opacity: 0.9\n  },\n  reversed: {\n    opacity: 0.9\n  }\n};","map":{"version":3,"names":["React","Pressable","colors","spacing","typography","Text","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Button","props","tx","text","txOptions","$viewStyleOverride","style","$pressedViewStyleOverride","pressedStyle","$textStyleOverride","textStyle","$pressedTextStyleOverride","pressedTextStyle","children","RightAccessory","LeftAccessory","rest","_objectWithoutProperties","_excluded","preset","$viewPresets","$viewStyle","_ref","pressed","$pressedViewPresets","$textStyle","_ref2","$textPresets","$pressedTextPresets","_objectSpread","accessibilityRole","state","$leftAccessoryStyle","pressableState","$rightAccessoryStyle","$baseViewStyle","minHeight","borderRadius","justifyContent","alignItems","flexDirection","paddingVertical","sm","paddingHorizontal","overflow","$baseTextStyle","fontSize","lineHeight","fontFamily","primary","medium","textAlign","flexShrink","flexGrow","zIndex","marginStart","xs","marginEnd","default","borderWidth","borderColor","palette","neutral400","backgroundColor","neutral100","filled","neutral300","reversed","neutral800","color","neutral200","neutral700","opacity"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/components/Button.tsx"],"sourcesContent":["import React, { ComponentType } from \"react\"\nimport {\n  Pressable,\n  PressableProps,\n  PressableStateCallbackType,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\"\nimport { colors, spacing, typography } from \"../theme\"\nimport { Text, TextProps } from \"./Text\"\n\ntype Presets = keyof typeof $viewPresets\n\nexport interface ButtonAccessoryProps {\n  style: StyleProp<any>\n  pressableState: PressableStateCallbackType\n}\n\nexport interface ButtonProps extends PressableProps {\n  /**\n   * Text which is looked up via i18n.\n   */\n  tx?: TextProps[\"tx\"]\n  /**\n   * The text to display if not using `tx` or nested components.\n   */\n  text?: TextProps[\"text\"]\n  /**\n   * Optional options to pass to i18n. Useful for interpolation\n   * as well as explicitly setting locale or translation fallbacks.\n   */\n  txOptions?: TextProps[\"txOptions\"]\n  /**\n   * An optional style override useful for padding & margin.\n   */\n  style?: StyleProp<ViewStyle>\n  /**\n   * An optional style override for the \"pressed\" state.\n   */\n  pressedStyle?: StyleProp<ViewStyle>\n  /**\n   * An optional style override for the button text.\n   */\n  textStyle?: StyleProp<TextStyle>\n  /**\n   * An optional style override for the button text when in the \"pressed\" state.\n   */\n  pressedTextStyle?: StyleProp<TextStyle>\n  /**\n   * One of the different types of button presets.\n   */\n  preset?: Presets\n  /**\n   * An optional component to render on the right side of the text.\n   * Example: `RightAccessory={(props) => <View {...props} />}`\n   */\n  RightAccessory?: ComponentType<ButtonAccessoryProps>\n  /**\n   * An optional component to render on the left side of the text.\n   * Example: `LeftAccessory={(props) => <View {...props} />}`\n   */\n  LeftAccessory?: ComponentType<ButtonAccessoryProps>\n  /**\n   * Children components.\n   */\n  children?: React.ReactNode\n}\n\n/**\n * A component that allows users to take actions and make choices.\n * Wraps the Text component with a Pressable component.\n *\n * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Button.md)\n */\nexport function Button(props: ButtonProps) {\n  const {\n    tx,\n    text,\n    txOptions,\n    style: $viewStyleOverride,\n    pressedStyle: $pressedViewStyleOverride,\n    textStyle: $textStyleOverride,\n    pressedTextStyle: $pressedTextStyleOverride,\n    children,\n    RightAccessory,\n    LeftAccessory,\n    ...rest\n  } = props\n\n  const preset: Presets = $viewPresets[props.preset] ? props.preset : \"default\"\n  function $viewStyle({ pressed }) {\n    return [\n      $viewPresets[preset],\n      $viewStyleOverride,\n      !!pressed && [$pressedViewPresets[preset], $pressedViewStyleOverride],\n    ]\n  }\n  function $textStyle({ pressed }) {\n    return [\n      $textPresets[preset],\n      $textStyleOverride,\n      !!pressed && [$pressedTextPresets[preset], $pressedTextStyleOverride],\n    ]\n  }\n\n  return (\n    <Pressable style={$viewStyle} accessibilityRole=\"button\" {...rest}>\n      {(state) => (\n        <>\n          {!!LeftAccessory && <LeftAccessory style={$leftAccessoryStyle} pressableState={state} />}\n\n          <Text tx={tx} text={text} txOptions={txOptions} style={$textStyle(state)}>\n            {children}\n          </Text>\n\n          {!!RightAccessory && (\n            <RightAccessory style={$rightAccessoryStyle} pressableState={state} />\n          )}\n        </>\n      )}\n    </Pressable>\n  )\n}\n\nconst $baseViewStyle: ViewStyle = {\n  minHeight: 56,\n  borderRadius: 4,\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  flexDirection: \"row\",\n  paddingVertical: spacing.sm,\n  paddingHorizontal: spacing.sm,\n  overflow: \"hidden\",\n}\n\nconst $baseTextStyle: TextStyle = {\n  fontSize: 16,\n  lineHeight: 20,\n  fontFamily: typography.primary.medium,\n  textAlign: \"center\",\n  flexShrink: 1,\n  flexGrow: 0,\n  zIndex: 2,\n}\n\nconst $rightAccessoryStyle: ViewStyle = { marginStart: spacing.xs, zIndex: 1 }\nconst $leftAccessoryStyle: ViewStyle = { marginEnd: spacing.xs, zIndex: 1 }\n\nconst $viewPresets = {\n  default: [\n    $baseViewStyle,\n    {\n      borderWidth: 1,\n      borderColor: colors.palette.neutral400,\n      backgroundColor: colors.palette.neutral100,\n    },\n  ] as StyleProp<ViewStyle>,\n\n  filled: [$baseViewStyle, { backgroundColor: colors.palette.neutral300 }] as StyleProp<ViewStyle>,\n\n  reversed: [\n    $baseViewStyle,\n    { backgroundColor: colors.palette.neutral800 },\n  ] as StyleProp<ViewStyle>,\n}\n\nconst $textPresets: Record<Presets, StyleProp<TextStyle>> = {\n  default: $baseTextStyle,\n  filled: $baseTextStyle,\n  reversed: [$baseTextStyle, { color: colors.palette.neutral100 }],\n}\n\nconst $pressedViewPresets: Record<Presets, StyleProp<ViewStyle>> = {\n  default: { backgroundColor: colors.palette.neutral200 },\n  filled: { backgroundColor: colors.palette.neutral400 },\n  reversed: { backgroundColor: colors.palette.neutral700 },\n}\n\nconst $pressedTextPresets: Record<Presets, StyleProp<TextStyle>> = {\n  default: { opacity: 0.9 },\n  filled: { opacity: 0.9 },\n  reversed: { opacity: 0.9 },\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}