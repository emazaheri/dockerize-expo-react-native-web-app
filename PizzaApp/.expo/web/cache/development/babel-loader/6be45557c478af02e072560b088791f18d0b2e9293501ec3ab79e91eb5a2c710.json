{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ArgType } from \"reactotron-core-client\";\nimport { mst } from \"reactotron-mst\";\nimport { clear } from \"../utils/storage\";\nimport { goBack, resetRoot, navigate } from \"../navigators/navigationUtilities\";\nimport { Reactotron } from \"./ReactotronClient\";\nReactotron.configure({\n  name: require(\"../../package.json\").name,\n  host: \"localhost\",\n  onConnect: function onConnect() {\n    Reactotron.clear();\n  }\n});\nReactotron.use(mst({\n  filter: function filter(event) {\n    return /postProcessSnapshot|@APPLY_SNAPSHOT/.test(event.name) === false;\n  }\n}));\nif (Platform.OS !== \"web\") {\n  Reactotron.setAsyncStorageHandler(AsyncStorage);\n  Reactotron.useReactNative();\n}\nReactotron.onCustomCommand({\n  title: \"Reset Root Store\",\n  description: \"Resets the MST store\",\n  command: \"resetStore\",\n  handler: function handler() {\n    Reactotron.log(\"resetting store\");\n    clear();\n  }\n});\nReactotron.onCustomCommand({\n  title: \"Reset Navigation State\",\n  description: \"Resets the navigation state\",\n  command: \"resetNavigation\",\n  handler: function handler() {\n    Reactotron.log(\"resetting navigation state\");\n    resetRoot({\n      index: 0,\n      routes: []\n    });\n  }\n});\nReactotron.onCustomCommand({\n  command: \"navigateTo\",\n  handler: function handler(args) {\n    var route = args.route;\n    if (route) {\n      Reactotron.log(\"Navigating to: \" + route);\n      navigate(route);\n    } else {\n      Reactotron.log(\"Could not navigate. No route provided.\");\n    }\n  },\n  title: \"Navigate To Screen\",\n  description: \"Navigates to a screen by name.\",\n  args: [{\n    name: \"route\",\n    type: ArgType.String\n  }]\n});\nReactotron.onCustomCommand({\n  title: \"Go Back\",\n  description: \"Goes back\",\n  command: \"goBack\",\n  handler: function handler() {\n    Reactotron.log(\"Going back\");\n    goBack();\n  }\n});\nconsole.tron = Reactotron;\nvar ogConsoleLog = console.log;\nconsole.log = function () {\n  ogConsoleLog.apply(void 0, arguments);\n  Reactotron.log.apply(Reactotron, arguments);\n};\nvar ogConsoleWarn = console.warn;\nconsole.warn = function () {\n  ogConsoleWarn.apply(void 0, arguments);\n  Reactotron.warn(arguments.length <= 0 ? undefined : arguments[0]);\n};\nvar ogConsoleDebug = console.debug;\nconsole.debug = function () {\n  ogConsoleDebug.apply(void 0, arguments);\n  Reactotron.debug(arguments.length <= 0 ? undefined : arguments[0]);\n};\nReactotron.connect();","map":{"version":3,"names":["AsyncStorage","ArgType","mst","clear","goBack","resetRoot","navigate","Reactotron","configure","name","require","host","onConnect","use","filter","event","test","Platform","OS","setAsyncStorageHandler","useReactNative","onCustomCommand","title","description","command","handler","log","index","routes","args","route","type","String","console","tron","ogConsoleLog","apply","arguments","ogConsoleWarn","warn","length","undefined","ogConsoleDebug","debug","connect"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/devtools/ReactotronConfig.ts"],"sourcesContent":["/**\n * This file does the setup for integration with Reactotron, which is a\n * free desktop app for inspecting and debugging your React Native app.\n * @see https://github.com/infinitered/reactotron\n */\nimport { Platform } from \"react-native\"\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { ArgType } from \"reactotron-core-client\"\nimport { mst } from \"reactotron-mst\"\n\nimport { clear } from \"app/utils/storage\"\nimport { goBack, resetRoot, navigate } from \"app/navigators/navigationUtilities\"\n\nimport { Reactotron } from \"./ReactotronClient\"\n\nReactotron.configure({\n  name: require(\"../../package.json\").name,\n  host: \"localhost\",\n  onConnect: () => {\n    /** since this file gets hot reloaded, let's clear the past logs every time we connect */\n    Reactotron.clear()\n  },\n})\n\nReactotron.use(\n  mst({\n    /** ignore some chatty `mobx-state-tree` actions  */\n    filter: (event) => /postProcessSnapshot|@APPLY_SNAPSHOT/.test(event.name) === false,\n  }),\n)\n\nif (Platform.OS !== \"web\") {\n  Reactotron.setAsyncStorageHandler(AsyncStorage)\n  Reactotron.useReactNative()\n}\n\n/**\n * Reactotron allows you to define custom commands that you can run\n * from Reactotron itself, and they will run in your app.\n *\n * Define them in the section below with `onCustomCommand`. Use your\n * creativity -- this is great for development to quickly and easily\n * get your app into the state you want.\n *\n * NOTE: If you edit this file while running the app, you will need to do a full refresh\n * or else your custom commands won't be registered correctly.\n */\nReactotron.onCustomCommand({\n  title: \"Reset Root Store\",\n  description: \"Resets the MST store\",\n  command: \"resetStore\",\n  handler: () => {\n    Reactotron.log(\"resetting store\")\n    clear()\n  },\n})\n\nReactotron.onCustomCommand({\n  title: \"Reset Navigation State\",\n  description: \"Resets the navigation state\",\n  command: \"resetNavigation\",\n  handler: () => {\n    Reactotron.log(\"resetting navigation state\")\n    resetRoot({ index: 0, routes: [] })\n  },\n})\n\nReactotron.onCustomCommand({\n  command: \"navigateTo\",\n  handler: (args) => {\n    const { route } = args\n    if (route) {\n      Reactotron.log(`Navigating to: ${route}`)\n      navigate(route)\n    } else {\n      Reactotron.log(\"Could not navigate. No route provided.\")\n    }\n  },\n  title: \"Navigate To Screen\",\n  description: \"Navigates to a screen by name.\",\n  args: [\n    {\n      name: \"route\",\n      type: ArgType.String,\n    },\n  ],\n})\n\nReactotron.onCustomCommand({\n  title: \"Go Back\",\n  description: \"Goes back\",\n  command: \"goBack\",\n  handler: () => {\n    Reactotron.log(\"Going back\")\n    goBack()\n  },\n})\n\n/**\n * We're going to add `console.tron` to the Reactotron object.\n * Now, anywhere in our app in development, we can use Reactotron like so:\n *\n * ```\n * if (__DEV__) {\n *  console.tron.log('here')\n * }\n * ```\n *\n * Use this power responsibly! :)\n */\nconsole.tron = Reactotron\n\n/**\n * We tell typescript about our dark magic\n *\n * You can also import Reactotron yourself from ./reactotronClient\n * and use it directly, like Reactotron.log('hello world')\n */\ndeclare global {\n  interface Console {\n    /**\n     * Reactotron client for logging, displaying, measuring performance, and more.\n     * @see https://github.com/infinitered/reactotron\n     *\n     * @example\n     * if (__DEV__) {\n     *  console.tron.log(\"here\")\n     *\n     *  console.tron.display({\n     *    name: 'JOKE',\n     *    preview: 'What's the best thing about Switzerland?',\n     *    value: 'I don't know, but the flag is a big plus!',\n     *    important: true\n     *  })\n     * }\n     *\n     */\n    tron: typeof Reactotron\n  }\n}\n\n/**\n * For our last trick, we are going to monkey patching console to also output to Reactotron.\n */\nconst ogConsoleLog = console.log\nconsole.log = (...args: Parameters<typeof console.log>) => {\n  ogConsoleLog(...args)\n  Reactotron.log(...args)\n}\n\nconst ogConsoleWarn = console.warn\nconsole.warn = (...args: Parameters<typeof console.warn>) => {\n  ogConsoleWarn(...args)\n  Reactotron.warn(args[0])\n}\n\nconst ogConsoleDebug = console.debug\nconsole.debug = (...args: Parameters<typeof console.debug>) => {\n  ogConsoleDebug(...args)\n  Reactotron.debug(args[0])\n}\n\n/**\n * Now that we've setup all our Reactotron configuration, let's connect!\n */\nReactotron.connect()\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}