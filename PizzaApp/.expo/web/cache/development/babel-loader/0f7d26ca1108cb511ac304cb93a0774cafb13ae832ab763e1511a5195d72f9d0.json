{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport I18n from \"i18n-js\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport ar from \"date-fns/locale/ar-SA\";\nimport ko from \"date-fns/locale/ko\";\nimport en from \"date-fns/locale/en-US\";\nvar getLocale = function getLocale() {\n  var locale = I18n.currentLocale().split(\"-\")[0];\n  return locale === \"ar\" ? ar : locale === \"ko\" ? ko : en;\n};\nexport var formatDate = function formatDate(date, dateFormat, options) {\n  var locale = getLocale();\n  var dateOptions = _objectSpread(_objectSpread({}, options), {}, {\n    locale: locale\n  });\n  return format(parseISO(date), dateFormat != null ? dateFormat : \"MMM dd, yyyy\", dateOptions);\n};","map":{"version":3,"names":["I18n","format","parseISO","ar","ko","en","getLocale","locale","currentLocale","split","formatDate","date","dateFormat","options","dateOptions","_objectSpread"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/utils/formatDate.ts"],"sourcesContent":["import I18n from \"i18n-js\"\n\n// Note the syntax of these imports from the date-fns library.\n// If you import with the syntax: import { format } from \"date-fns\" the ENTIRE library\n// will be included in your production bundle (even if you only use one function).\n// This is because react-native does not support tree-shaking.\nimport type Locale from \"date-fns/locale\"\nimport format from \"date-fns/format\"\nimport parseISO from \"date-fns/parseISO\"\nimport ar from \"date-fns/locale/ar-SA\"\nimport ko from \"date-fns/locale/ko\"\nimport en from \"date-fns/locale/en-US\"\n\ntype Options = Parameters<typeof format>[2]\n\nconst getLocale = (): Locale => {\n  const locale = I18n.currentLocale().split(\"-\")[0]\n  return locale === \"ar\" ? ar : locale === \"ko\" ? ko : en\n}\n\nexport const formatDate = (date: string, dateFormat?: string, options?: Options) => {\n  const locale = getLocale()\n  const dateOptions = {\n    ...options,\n    locale,\n  }\n  return format(parseISO(date), dateFormat ?? \"MMM dd, yyyy\", dateOptions)\n}\n"],"mappings":";;;AAAA,OAAOA,IAAI,MAAM,SAAS;AAO1B,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,EAAE,MAAM,uBAAuB;AACtC,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,uBAAuB;AAItC,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAiB;EAC9B,IAAMC,MAAM,GAAGP,IAAI,CAACQ,aAAa,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACjD,OAAOF,MAAM,KAAK,IAAI,GAAGJ,EAAE,GAAGI,MAAM,KAAK,IAAI,GAAGH,EAAE,GAAGC,EAAE;AACzD,CAAC;AAED,OAAO,IAAMK,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAY,EAAEC,UAAmB,EAAEC,OAAiB,EAAK;EAClF,IAAMN,MAAM,GAAGD,SAAS,CAAC,CAAC;EAC1B,IAAMQ,WAAW,GAAAC,aAAA,CAAAA,aAAA,KACZF,OAAO;IACVN,MAAM,EAANA;EAAM,EACP;EACD,OAAON,MAAM,CAACC,QAAQ,CAACS,IAAI,CAAC,EAAEC,UAAU,WAAVA,UAAU,GAAI,cAAc,EAAEE,WAAW,CAAC;AAC1E,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}