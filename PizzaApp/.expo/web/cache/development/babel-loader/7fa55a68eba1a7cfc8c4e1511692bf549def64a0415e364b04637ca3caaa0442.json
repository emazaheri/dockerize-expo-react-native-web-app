{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { create } from \"apisauce\";\nimport Config from \"../../config\";\nimport { getGeneralApiProblem } from \"./apiProblem\";\nexport var DEFAULT_API_CONFIG = {\n  url: Config.API_URL,\n  timeout: 10000\n};\nexport var Api = function () {\n  function Api() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_API_CONFIG;\n    _classCallCheck(this, Api);\n    this.config = config;\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {\n        Accept: \"application/json\"\n      }\n    });\n  }\n  _createClass(Api, [{\n    key: \"getEpisodes\",\n    value: function () {\n      var _getEpisodes = _asyncToGenerator(function* () {\n        var response = yield this.apisauce.get(\"api.json?rss_url=https%3A%2F%2Ffeeds.simplecast.com%2FhEI_f9Dx\");\n        if (!response.ok) {\n          var problem = getGeneralApiProblem(response);\n          if (problem) return problem;\n        }\n        try {\n          var rawData = response.data;\n          var episodes = rawData.items.map(function (raw) {\n            return _objectSpread({}, raw);\n          });\n          return {\n            kind: \"ok\",\n            episodes: episodes\n          };\n        } catch (e) {\n          if (__DEV__) {\n            console.tron.error(\"Bad data: \" + e.message + \"\\n\" + response.data, e.stack);\n          }\n          return {\n            kind: \"bad-data\"\n          };\n        }\n      });\n      function getEpisodes() {\n        return _getEpisodes.apply(this, arguments);\n      }\n      return getEpisodes;\n    }()\n  }]);\n  return Api;\n}();\nexport var api = new Api();","map":{"version":3,"names":["create","Config","getGeneralApiProblem","DEFAULT_API_CONFIG","url","API_URL","timeout","Api","config","arguments","length","undefined","_classCallCheck","apisauce","baseURL","headers","Accept","_createClass","key","value","_getEpisodes","_asyncToGenerator","response","get","ok","problem","rawData","data","episodes","items","map","raw","_objectSpread","kind","e","__DEV__","console","tron","error","message","stack","getEpisodes","apply","api"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/services/api/api.ts"],"sourcesContent":["/**\n * This Api class lets you define an API endpoint and methods to request\n * data and process it.\n *\n * See the [Backend API Integration](https://github.com/infinitered/ignite/blob/master/docs/Backend-API-Integration.md)\n * documentation for more details.\n */\nimport {\n  ApiResponse, // @demo remove-current-line\n  ApisauceInstance,\n  create,\n} from \"apisauce\"\nimport Config from \"../../config\"\nimport { GeneralApiProblem, getGeneralApiProblem } from \"./apiProblem\" // @demo remove-current-line\nimport type {\n  ApiConfig,\n  ApiFeedResponse, // @demo remove-current-line\n} from \"./api.types\"\nimport type { EpisodeSnapshotIn } from \"../../models/Episode\" // @demo remove-current-line\n\n/**\n * Configuring the apisauce instance.\n */\nexport const DEFAULT_API_CONFIG: ApiConfig = {\n  url: Config.API_URL,\n  timeout: 10000,\n}\n\n/**\n * Manages all requests to the API. You can use this class to build out\n * various requests that you need to call from your backend API.\n */\nexport class Api {\n  apisauce: ApisauceInstance\n  config: ApiConfig\n\n  /**\n   * Set up our API instance. Keep this lightweight!\n   */\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n  }\n\n  // @demo remove-block-start\n  /**\n   * Gets a list of recent React Native Radio episodes.\n   */\n  async getEpisodes(): Promise<{ kind: \"ok\"; episodes: EpisodeSnapshotIn[] } | GeneralApiProblem> {\n    // make the api call\n    const response: ApiResponse<ApiFeedResponse> = await this.apisauce.get(\n      `api.json?rss_url=https%3A%2F%2Ffeeds.simplecast.com%2FhEI_f9Dx`,\n    )\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response)\n      if (problem) return problem\n    }\n\n    // transform the data into the format we are expecting\n    try {\n      const rawData = response.data\n\n      // This is where we transform the data into the shape we expect for our MST model.\n      const episodes: EpisodeSnapshotIn[] = rawData.items.map((raw) => ({\n        ...raw,\n      }))\n\n      return { kind: \"ok\", episodes }\n    } catch (e) {\n      if (__DEV__) {\n        console.tron.error(`Bad data: ${e.message}\\n${response.data}`, e.stack)\n      }\n      return { kind: \"bad-data\" }\n    }\n  }\n  // @demo remove-block-end\n}\n\n// Singleton instance of the API for convenience\nexport const api = new Api()\n"],"mappings":";;;;;;AAOA,SAGEA,MAAM,QACD,UAAU;AACjB,OAAOC,MAAM;AACb,SAA4BC,oBAAoB;AAUhD,OAAO,IAAMC,kBAA6B,GAAG;EAC3CC,GAAG,EAAEH,MAAM,CAACI,OAAO;EACnBC,OAAO,EAAE;AACX,CAAC;AAMD,WAAaC,GAAG;EAOd,SAAAA,IAAA,EAAoD;IAAA,IAAxCC,MAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,kBAAkB;IAAAS,eAAA,OAAAL,GAAA;IAChD,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,QAAQ,GAAGb,MAAM,CAAC;MACrBc,OAAO,EAAE,IAAI,CAACN,MAAM,CAACJ,GAAG;MACxBE,OAAO,EAAE,IAAI,CAACE,MAAM,CAACF,OAAO;MAC5BS,OAAO,EAAE;QACPC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;EACJ;EAACC,YAAA,CAAAV,GAAA;IAAAW,GAAA;IAAAC,KAAA;MAAA,IAAAC,YAAA,GAAAC,iBAAA,CAMD,aAAgG;QAE9F,IAAMC,QAAsC,SAAS,IAAI,CAACT,QAAQ,CAACU,GAAG,iEAEtE,CAAC;QAGD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,IAAMC,OAAO,GAAGvB,oBAAoB,CAACoB,QAAQ,CAAC;UAC9C,IAAIG,OAAO,EAAE,OAAOA,OAAO;QAC7B;QAGA,IAAI;UACF,IAAMC,OAAO,GAAGJ,QAAQ,CAACK,IAAI;UAG7B,IAAMC,QAA6B,GAAGF,OAAO,CAACG,KAAK,CAACC,GAAG,CAAC,UAACC,GAAG;YAAA,OAAAC,aAAA,KACvDD,GAAG;UAAA,CACN,CAAC;UAEH,OAAO;YAAEE,IAAI,EAAE,IAAI;YAAEL,QAAQ,EAARA;UAAS,CAAC;QACjC,CAAC,CAAC,OAAOM,CAAC,EAAE;UACV,IAAIC,OAAO,EAAE;YACXC,OAAO,CAACC,IAAI,CAACC,KAAK,gBAAcJ,CAAC,CAACK,OAAO,UAAKjB,QAAQ,CAACK,IAAI,EAAIO,CAAC,CAACM,KAAK,CAAC;UACzE;UACA,OAAO;YAAEP,IAAI,EAAE;UAAW,CAAC;QAC7B;MACF,CAAC;MAAA,SAAAQ,YAAA;QAAA,OAAArB,YAAA,CAAAsB,KAAA,OAAAjC,SAAA;MAAA;MAAA,OAAAgC,WAAA;IAAA;EAAA;EAAA,OAAAlC,GAAA;AAAA;AAKH,OAAO,IAAMoC,GAAG,GAAG,IAAIpC,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}