{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{DarkTheme,DefaultTheme,NavigationContainer}from\"@react-navigation/native\";import{createNativeStackNavigator}from\"@react-navigation/native-stack\";import{observer}from\"mobx-react-lite\";import React from\"react\";import useColorScheme from\"react-native-web/dist/exports/useColorScheme\";import*as Screens from\"../screens\";import Config from\"../config\";import{useStores}from\"../models\";import{DemoNavigator}from\"./DemoNavigator\";import{navigationRef,useBackButtonHandler}from\"./navigationUtilities\";import{colors}from\"../theme\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var exitRoutes=Config.exitRoutes;var Stack=createNativeStackNavigator();var AppStack=observer(function AppStack(){var _useStores=useStores(),isAuthenticated=_useStores.authenticationStore.isAuthenticated;return _jsx(Stack.Navigator,{screenOptions:{headerShown:false,navigationBarColor:colors.background},initialRouteName:isAuthenticated?\"Welcome\":\"Login\",children:isAuthenticated?_jsxs(_Fragment,{children:[_jsx(Stack.Screen,{name:\"Welcome\",component:Screens.WelcomeScreen}),_jsx(Stack.Screen,{name:\"Demo\",component:DemoNavigator})]}):_jsx(_Fragment,{children:_jsx(Stack.Screen,{name:\"Login\",component:Screens.LoginScreen})})});});export var AppNavigator=observer(function AppNavigator(props){var colorScheme=useColorScheme();useBackButtonHandler(function(routeName){return exitRoutes.includes(routeName);});return _jsx(NavigationContainer,_objectSpread(_objectSpread({ref:navigationRef,theme:colorScheme===\"dark\"?DarkTheme:DefaultTheme},props),{},{children:_jsx(AppStack,{})}));});","map":{"version":3,"names":["DarkTheme","DefaultTheme","NavigationContainer","createNativeStackNavigator","observer","React","useColorScheme","Screens","Config","useStores","DemoNavigator","navigationRef","useBackButtonHandler","colors","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","exitRoutes","Stack","AppStack","_useStores","isAuthenticated","authenticationStore","Navigator","screenOptions","headerShown","navigationBarColor","background","initialRouteName","children","Screen","name","component","WelcomeScreen","LoginScreen","AppNavigator","props","colorScheme","routeName","includes","_objectSpread","ref","theme"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/navigators/AppNavigator.tsx"],"sourcesContent":["/**\n * The app navigator (formerly \"AppNavigator\" and \"MainNavigator\") is used for the primary\n * navigation flows of your app.\n * Generally speaking, it will contain an auth flow (registration, login, forgot password)\n * and a \"main\" flow which the user will use once logged in.\n */\nimport {\n  DarkTheme,\n  DefaultTheme,\n  NavigationContainer,\n  NavigatorScreenParams, // @demo remove-current-line\n} from \"@react-navigation/native\"\nimport { createNativeStackNavigator, NativeStackScreenProps } from \"@react-navigation/native-stack\"\nimport { observer } from \"mobx-react-lite\"\nimport React from \"react\"\nimport { useColorScheme } from \"react-native\"\nimport * as Screens from \"app/screens\"\nimport Config from \"../config\"\nimport { useStores } from \"../models\" // @demo remove-current-line\nimport { DemoNavigator, DemoTabParamList } from \"./DemoNavigator\" // @demo remove-current-line\nimport { navigationRef, useBackButtonHandler } from \"./navigationUtilities\"\nimport { colors } from \"app/theme\"\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * If no params are allowed, pass through `undefined`. Generally speaking, we\n * recommend using your MobX-State-Tree store(s) to keep application state\n * rather than passing state through navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n *   https://reactnavigation.org/docs/typescript/#organizing-types\n */\nexport type AppStackParamList = {\n  Welcome: undefined\n  Login: undefined // @demo remove-current-line\n  Demo: NavigatorScreenParams<DemoTabParamList> // @demo remove-current-line\n  // ðŸ”¥ Your screens go here\n  // IGNITE_GENERATOR_ANCHOR_APP_STACK_PARAM_LIST\n}\n\n/**\n * This is a list of all the route names that will exit the app if the back button\n * is pressed while in that screen. Only affects Android.\n */\nconst exitRoutes = Config.exitRoutes\n\nexport type AppStackScreenProps<T extends keyof AppStackParamList> = NativeStackScreenProps<\n  AppStackParamList,\n  T\n>\n\n// Documentation: https://reactnavigation.org/docs/stack-navigator/\nconst Stack = createNativeStackNavigator<AppStackParamList>()\n\nconst AppStack = observer(function AppStack() {\n  // @demo remove-block-start\n  const {\n    authenticationStore: { isAuthenticated },\n  } = useStores()\n\n  // @demo remove-block-end\n  return (\n    <Stack.Navigator\n      screenOptions={{ headerShown: false, navigationBarColor: colors.background }}\n      initialRouteName={isAuthenticated ? \"Welcome\" : \"Login\"} // @demo remove-current-line\n    >\n      {/* @demo remove-block-start */}\n      {isAuthenticated ? (\n        <>\n          {/* @demo remove-block-end */}\n          <Stack.Screen name=\"Welcome\" component={Screens.WelcomeScreen} />\n          {/* @demo remove-block-start */}\n          <Stack.Screen name=\"Demo\" component={DemoNavigator} />\n        </>\n      ) : (\n        <>\n          <Stack.Screen name=\"Login\" component={Screens.LoginScreen} />\n        </>\n      )}\n      {/* @demo remove-block-end */}\n      {/** ðŸ”¥ Your screens go here */}\n      {/* IGNITE_GENERATOR_ANCHOR_APP_STACK_SCREENS */}\n    </Stack.Navigator>\n  )\n})\n\nexport interface NavigationProps\n  extends Partial<React.ComponentProps<typeof NavigationContainer>> {}\n\nexport const AppNavigator = observer(function AppNavigator(props: NavigationProps) {\n  const colorScheme = useColorScheme()\n\n  useBackButtonHandler((routeName) => exitRoutes.includes(routeName))\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n      {...props}\n    >\n      <AppStack />\n    </NavigationContainer>\n  )\n})\n"],"mappings":"+qBAMA,OACEA,SAAS,CACTC,YAAY,CACZC,mBAAmB,KAEd,0BAA0B,CACjC,OAASC,0BAA0B,KAAgC,gCAAgC,CACnG,OAASC,QAAQ,KAAQ,iBAAiB,CAC1C,MAAO,CAAAC,KAAK,KAAM,OAAO,QAAAC,cAAA,oDAEzB,MAAO,GAAK,CAAAC,OAAO,kBACnB,MAAO,CAAAC,MAAM,iBACb,OAASC,SAAS,iBAClB,OAASC,aAAa,uBACtB,OAASC,aAAa,CAAEC,oBAAoB,6BAC5C,OAASC,MAAM,gBAAmB,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBA2BlC,GAAM,CAAAC,UAAU,CAAGZ,MAAM,CAACY,UAAU,CAQpC,GAAM,CAAAC,KAAK,CAAGlB,0BAA0B,CAAoB,CAAC,CAE7D,GAAM,CAAAmB,QAAQ,CAAGlB,QAAQ,CAAC,QAAS,CAAAkB,QAAQA,CAAA,CAAG,CAE5C,IAAAC,UAAA,CAEId,SAAS,CAAC,CAAC,CADUe,eAAe,CAAAD,UAAA,CAAtCE,mBAAmB,CAAID,eAAe,CAIxC,MACE,CAAAT,IAAA,CAACM,KAAK,CAACK,SAAS,EACdC,aAAa,CAAE,CAAEC,WAAW,CAAE,KAAK,CAAEC,kBAAkB,CAAEhB,MAAM,CAACiB,UAAW,CAAE,CAC7EC,gBAAgB,CAAEP,eAAe,CAAG,SAAS,CAAG,OAAQ,CAAAQ,QAAA,CAGvDR,eAAe,CACdL,KAAA,CAAAF,SAAA,EAAAe,QAAA,EAEEjB,IAAA,CAACM,KAAK,CAACY,MAAM,EAACC,IAAI,CAAC,SAAS,CAACC,SAAS,CAAE5B,OAAO,CAAC6B,aAAc,CAAE,CAAC,CAEjErB,IAAA,CAACM,KAAK,CAACY,MAAM,EAACC,IAAI,CAAC,MAAM,CAACC,SAAS,CAAEzB,aAAc,CAAE,CAAC,EACtD,CAAC,CAEHK,IAAA,CAAAE,SAAA,EAAAe,QAAA,CACEjB,IAAA,CAACM,KAAK,CAACY,MAAM,EAACC,IAAI,CAAC,OAAO,CAACC,SAAS,CAAE5B,OAAO,CAAC8B,WAAY,CAAE,CAAC,CAC7D,CACH,CAIc,CAAC,CAEtB,CAAC,CAAC,CAKF,MAAO,IAAM,CAAAC,YAAY,CAAGlC,QAAQ,CAAC,QAAS,CAAAkC,YAAYA,CAACC,KAAsB,CAAE,CACjF,GAAM,CAAAC,WAAW,CAAGlC,cAAc,CAAC,CAAC,CAEpCM,oBAAoB,CAAC,SAAC6B,SAAS,QAAK,CAAArB,UAAU,CAACsB,QAAQ,CAACD,SAAS,CAAC,GAAC,CAEnE,MACE,CAAA1B,IAAA,CAACb,mBAAmB,CAAAyC,aAAA,CAAAA,aAAA,EAClBC,GAAG,CAAEjC,aAAc,CACnBkC,KAAK,CAAEL,WAAW,GAAK,MAAM,CAAGxC,SAAS,CAAGC,YAAa,EACrDsC,KAAK,MAAAP,QAAA,CAETjB,IAAA,CAACO,QAAQ,GAAE,CAAC,EACO,CAAC,CAE1B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}