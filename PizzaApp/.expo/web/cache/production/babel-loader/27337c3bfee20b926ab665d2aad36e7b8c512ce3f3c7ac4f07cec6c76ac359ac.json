{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import ExpoLocalization from\"./ExpoLocalization\";export*from\"./Localization.types\";export var currency=ExpoLocalization.currency;export var decimalSeparator=ExpoLocalization.decimalSeparator;export var digitGroupingSeparator=ExpoLocalization.digitGroupingSeparator;export var isoCurrencyCodes=ExpoLocalization.isoCurrencyCodes;export var isMetric=ExpoLocalization.isMetric;export var isRTL=ExpoLocalization.isRTL;export var locale=ExpoLocalization.locale;export var locales=ExpoLocalization.locales;export var timezone=ExpoLocalization.timezone;export var region=ExpoLocalization.region;export var getLocales=ExpoLocalization.getLocales;export var getCalendars=ExpoLocalization.getCalendars;export function getLocalizationAsync(){return _getLocalizationAsync.apply(this,arguments);}function _getLocalizationAsync(){_getLocalizationAsync=_asyncToGenerator(function*(){return yield ExpoLocalization.getLocalizationAsync();});return _getLocalizationAsync.apply(this,arguments);}","map":{"version":3,"names":["ExpoLocalization","currency","decimalSeparator","digitGroupingSeparator","isoCurrencyCodes","isMetric","isRTL","locale","locales","timezone","region","getLocales","getCalendars","getLocalizationAsync","_getLocalizationAsync","apply","arguments","_asyncToGenerator"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/node_modules/expo-localization/src/Localization.ts"],"sourcesContent":["import ExpoLocalization from './ExpoLocalization';\nimport { Localization } from './Localization.types';\nexport * from './Localization.types';\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Three-character ISO 4217 currency code. Returns `null` on web.\n *\n * @example `'USD'`, `'EUR'`, `'CNY'`, `null`\n */\nexport const currency = ExpoLocalization.currency;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Decimal separator used for formatting numbers.\n *\n * @example `','`, `'.'`\n */\nexport const decimalSeparator = ExpoLocalization.decimalSeparator;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Digit grouping separator used when formatting numbers larger than 1000.\n *\n * @example `'.'`, `''`, `','`\n */\nexport const digitGroupingSeparator = ExpoLocalization.digitGroupingSeparator;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * A list of all the supported language ISO codes.\n */\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Boolean value that indicates whether the system uses the metric system.\n * On Android and web, this is inferred from the current region.\n */\nexport const isMetric = ExpoLocalization.isMetric;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * Returns if the system's language is written from Right-to-Left.\n * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n *\n * Returns `false` in Server Side Rendering (SSR) environments.\n */\nexport const isRTL = ExpoLocalization.isRTL;\n\n// @needsAudit\n/**\n * Consider using Localization.getLocales() for a list of user preferred locales instead.\n * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n * consisting of a two-character language code and optional script, region and variant codes.\n *\n * @example `'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`\n */\nexport const locale = ExpoLocalization.locale;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * List of all the native languages provided by the user settings.\n * These are returned in the order the user defines in their device settings.\n *\n * @example `['en', 'en-US', 'zh-Hans', 'zh-Hans-CN', 'en-emodeng']`\n */\nexport const locales = ExpoLocalization.locales;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * The current time zone in display format.\n * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a\n * better estimation you could use the moment-timezone package but it will add significant bloat to\n * your website's bundle size.\n *\n * @example `'America/Los_Angeles'`\n */\nexport const timezone = ExpoLocalization.timezone;\n\n// @needsAudit\n/**\n * @deprecated Use Localization.getLocales() instead.\n * The region code for your device that comes from the Region setting under Language & Region on iOS.\n * This value is always available on iOS, but might return `null` on Android or web.\n *\n * @example `'US'`, `'NZ'`, `null`\n */\nexport const region = ExpoLocalization.region;\n\n/**\n * List of user's locales, returned as an array of objects of type `Locale`.\n * Guaranteed to contain at least 1 element.\n * These are returned in the order the user defines in their device settings.\n * On the web currency and measurements systems are not provided, instead returned as null.\n * If needed, you can infer them from the current region using a lookup table.\n * @example `[{\n    \"languageTag\": \"pl-PL\",\n    \"languageCode\": \"pl\",\n    \"textDirection\": \"ltr\",\n    \"digitGroupingSeparator\": \" \",\n    \"decimalSeparator\": \",\",\n    \"measurementSystem\": \"metric\",\n    \"currencyCode\": \"PLN\",\n    \"currencySymbol\": \"zÅ‚\",\n    \"regionCode\": \"PL\"\n  }]`\n */\nexport const getLocales = ExpoLocalization.getLocales;\n\n/**\n * List of user's preferred calendars, returned as an array of objects of type `Calendar`.\n * Guaranteed to contain at least 1 element.\n * For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.\n * @example `[\n    {\n      \"calendar\": \"gregory\",\n      \"timeZone\": \"Europe/Warsaw\",\n      \"uses24hourClock\": true,\n      \"firstWeekday\": 1\n    }\n  ]`\n */\nexport const getCalendars = ExpoLocalization.getCalendars;\n\n// @needsAudit\n/**\n * Get the latest native values from the device. Locale can be changed on some Android devices\n * without resetting the app.\n * > On iOS, changing the locale will cause the device to reset meaning the constants will always be\n * correct.\n *\n * @example\n * ```ts\n * // When the app returns from the background on Android...\n *\n * const { locale } = await Localization.getLocalizationAsync();\n * ```\n * @deprecated\n * Use Localization.getLocales() or Localization.getCalendars() instead.\n */\nexport async function getLocalizationAsync(): Promise<Localization> {\n  return await ExpoLocalization.getLocalizationAsync();\n}\n"],"mappings":"uEAAA,MAAO,CAAAA,gBAAgB,0BAEvB,kCASA,MAAO,IAAM,CAAAC,QAAQ,CAAGD,gBAAgB,CAACC,QAAQ,CASjD,MAAO,IAAM,CAAAC,gBAAgB,CAAGF,gBAAgB,CAACE,gBAAgB,CASjE,MAAO,IAAM,CAAAC,sBAAsB,CAAGH,gBAAgB,CAACG,sBAAsB,CAO7E,MAAO,IAAM,CAAAC,gBAAgB,CAAGJ,gBAAgB,CAACI,gBAAgB,CAQjE,MAAO,IAAM,CAAAC,QAAQ,CAAGL,gBAAgB,CAACK,QAAQ,CAUjD,MAAO,IAAM,CAAAC,KAAK,CAAGN,gBAAgB,CAACM,KAAK,CAU3C,MAAO,IAAM,CAAAC,MAAM,CAAGP,gBAAgB,CAACO,MAAM,CAU7C,MAAO,IAAM,CAAAC,OAAO,CAAGR,gBAAgB,CAACQ,OAAO,CAY/C,MAAO,IAAM,CAAAC,QAAQ,CAAGT,gBAAgB,CAACS,QAAQ,CAUjD,MAAO,IAAM,CAAAC,MAAM,CAAGV,gBAAgB,CAACU,MAAM,CAoB7C,MAAO,IAAM,CAAAC,UAAU,CAAGX,gBAAgB,CAACW,UAAU,CAerD,MAAO,IAAM,CAAAC,YAAY,CAAGZ,gBAAgB,CAACY,YAAY,CAkBzD,eAAsB,CAAAC,oBAAoBA,CAAA,SAAAC,qBAAA,CAAAC,KAAA,MAAAC,SAAA,GAEzC,SAAAF,sBAAA,EAAAA,qBAAA,CAAAG,iBAAA,CAFM,WAAmC,CACxC,YAAa,CAAAjB,gBAAgB,CAACa,oBAAoB,EAAE,CACtD,CAAC,SAAAC,qBAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}