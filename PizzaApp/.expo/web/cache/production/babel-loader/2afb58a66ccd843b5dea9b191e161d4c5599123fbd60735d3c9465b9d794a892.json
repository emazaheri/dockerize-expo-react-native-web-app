{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import I18n from\"i18n-js\";import format from\"date-fns/format\";import parseISO from\"date-fns/parseISO\";import ar from\"date-fns/locale/ar-SA\";import ko from\"date-fns/locale/ko\";import en from\"date-fns/locale/en-US\";var getLocale=function getLocale(){var locale=I18n.currentLocale().split(\"-\")[0];return locale===\"ar\"?ar:locale===\"ko\"?ko:en;};export var formatDate=function formatDate(date,dateFormat,options){var locale=getLocale();var dateOptions=_objectSpread(_objectSpread({},options),{},{locale:locale});return format(parseISO(date),dateFormat!=null?dateFormat:\"MMM dd, yyyy\",dateOptions);};","map":{"version":3,"names":["I18n","format","parseISO","ar","ko","en","getLocale","locale","currentLocale","split","formatDate","date","dateFormat","options","dateOptions","_objectSpread"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/utils/formatDate.ts"],"sourcesContent":["import I18n from \"i18n-js\"\n\n// Note the syntax of these imports from the date-fns library.\n// If you import with the syntax: import { format } from \"date-fns\" the ENTIRE library\n// will be included in your production bundle (even if you only use one function).\n// This is because react-native does not support tree-shaking.\nimport type Locale from \"date-fns/locale\"\nimport format from \"date-fns/format\"\nimport parseISO from \"date-fns/parseISO\"\nimport ar from \"date-fns/locale/ar-SA\"\nimport ko from \"date-fns/locale/ko\"\nimport en from \"date-fns/locale/en-US\"\n\ntype Options = Parameters<typeof format>[2]\n\nconst getLocale = (): Locale => {\n  const locale = I18n.currentLocale().split(\"-\")[0]\n  return locale === \"ar\" ? ar : locale === \"ko\" ? ko : en\n}\n\nexport const formatDate = (date: string, dateFormat?: string, options?: Options) => {\n  const locale = getLocale()\n  const dateOptions = {\n    ...options,\n    locale,\n  }\n  return format(parseISO(date), dateFormat ?? \"MMM dd, yyyy\", dateOptions)\n}\n"],"mappings":"+qBAAA,MAAO,CAAAA,IAAI,KAAM,SAAS,CAO1B,MAAO,CAAAC,MAAM,KAAM,iBAAiB,CACpC,MAAO,CAAAC,QAAQ,KAAM,mBAAmB,CACxC,MAAO,CAAAC,EAAE,KAAM,uBAAuB,CACtC,MAAO,CAAAC,EAAE,KAAM,oBAAoB,CACnC,MAAO,CAAAC,EAAE,KAAM,uBAAuB,CAItC,GAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAA,CAAiB,CAC9B,GAAM,CAAAC,MAAM,CAAGP,IAAI,CAACQ,aAAa,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACjD,MAAO,CAAAF,MAAM,GAAK,IAAI,CAAGJ,EAAE,CAAGI,MAAM,GAAK,IAAI,CAAGH,EAAE,CAAGC,EAAE,CACzD,CAAC,CAED,MAAO,IAAM,CAAAK,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAIC,IAAY,CAAEC,UAAmB,CAAEC,OAAiB,CAAK,CAClF,GAAM,CAAAN,MAAM,CAAGD,SAAS,CAAC,CAAC,CAC1B,GAAM,CAAAQ,WAAW,CAAAC,aAAA,CAAAA,aAAA,IACZF,OAAO,MACVN,MAAM,CAANA,MAAM,EACP,CACD,MAAO,CAAAN,MAAM,CAACC,QAAQ,CAACS,IAAI,CAAC,CAAEC,UAAU,OAAVA,UAAU,CAAI,cAAc,CAAEE,WAAW,CAAC,CAC1E,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}