{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var _excluded=[\"maxWidth\",\"maxHeight\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import React,{useLayoutEffect,useState}from\"react\";import Image from\"react-native-web/dist/exports/Image\";import Platform from\"react-native-web/dist/exports/Platform\";import{jsx as _jsx}from\"react/jsx-runtime\";export function useAutoImage(remoteUri,dimensions){var _useState=useState([0,0]),_useState2=_slicedToArray(_useState,2),_useState2$=_slicedToArray(_useState2[0],2),remoteWidth=_useState2$[0],remoteHeight=_useState2$[1],setRemoteImageDimensions=_useState2[1];var remoteAspectRatio=remoteWidth/remoteHeight;var _ref=dimensions!=null?dimensions:[],_ref2=_slicedToArray(_ref,2),maxWidth=_ref2[0],maxHeight=_ref2[1];useLayoutEffect(function(){if(!remoteUri)return;Image.getSize(remoteUri,function(w,h){return setRemoteImageDimensions([w,h]);});},[remoteUri]);if(Number.isNaN(remoteAspectRatio))return[0,0];if(maxWidth&&maxHeight){var aspectRatio=Math.min(maxWidth/remoteWidth,maxHeight/remoteHeight);return[remoteWidth*aspectRatio,remoteHeight*aspectRatio];}else if(maxWidth){return[maxWidth,maxWidth/remoteAspectRatio];}else if(maxHeight){return[maxHeight*remoteAspectRatio,maxHeight];}else{return[remoteWidth,remoteHeight];}}export function AutoImage(props){var _ref3;var maxWidth=props.maxWidth,maxHeight=props.maxHeight,ImageProps=_objectWithoutProperties(props,_excluded);var source=props.source;var _useAutoImage=useAutoImage(Platform.select({web:(_ref3=source==null?void 0:source.uri)!=null?_ref3:source,default:source==null?void 0:source.uri}),[maxWidth,maxHeight]),_useAutoImage2=_slicedToArray(_useAutoImage,2),width=_useAutoImage2[0],height=_useAutoImage2[1];return _jsx(Image,_objectSpread(_objectSpread({},ImageProps),{},{style:[{width:width,height:height},props.style]}));}","map":{"version":3,"names":["React","useLayoutEffect","useState","Image","Platform","jsx","_jsx","useAutoImage","remoteUri","dimensions","_useState","_useState2","_slicedToArray","_useState2$","remoteWidth","remoteHeight","setRemoteImageDimensions","remoteAspectRatio","_ref","_ref2","maxWidth","maxHeight","getSize","w","h","Number","isNaN","aspectRatio","Math","min","AutoImage","props","_ref3","ImageProps","_objectWithoutProperties","_excluded","source","_useAutoImage","select","web","uri","default","_useAutoImage2","width","height","_objectSpread","style"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/components/AutoImage.tsx"],"sourcesContent":["import React, { useLayoutEffect, useState } from \"react\"\nimport { Image, ImageProps, ImageURISource, Platform } from \"react-native\"\n\n// TODO: document new props\nexport interface AutoImageProps extends ImageProps {\n  /**\n   * How wide should the image be?\n   */\n  maxWidth?: number\n  /**\n   * How tall should the image be?\n   */\n  maxHeight?: number\n}\n\n/**\n * A hook that will return the scaled dimensions of an image based on the\n * provided dimensions' aspect ratio. If no desired dimensions are provided,\n * it will return the original dimensions of the remote image.\n *\n * How is this different from `resizeMode: 'contain'`? Firstly, you can\n * specify only one side's size (not both). Secondly, the image will scale to fit\n * the desired dimensions instead of just being contained within its image-container.\n *\n */\nexport function useAutoImage(\n  remoteUri: string,\n  dimensions?: [maxWidth: number, maxHeight: number],\n): [width: number, height: number] {\n  const [[remoteWidth, remoteHeight], setRemoteImageDimensions] = useState([0, 0])\n  const remoteAspectRatio = remoteWidth / remoteHeight\n  const [maxWidth, maxHeight] = dimensions ?? []\n\n  useLayoutEffect(() => {\n    if (!remoteUri) return\n\n    Image.getSize(remoteUri, (w, h) => setRemoteImageDimensions([w, h]))\n  }, [remoteUri])\n\n  if (Number.isNaN(remoteAspectRatio)) return [0, 0]\n\n  if (maxWidth && maxHeight) {\n    const aspectRatio = Math.min(maxWidth / remoteWidth, maxHeight / remoteHeight)\n    return [remoteWidth * aspectRatio, remoteHeight * aspectRatio]\n  } else if (maxWidth) {\n    return [maxWidth, maxWidth / remoteAspectRatio]\n  } else if (maxHeight) {\n    return [maxHeight * remoteAspectRatio, maxHeight]\n  } else {\n    return [remoteWidth, remoteHeight]\n  }\n}\n\n/**\n * An Image component that automatically sizes a remote or data-uri image.\n *\n * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-AutoImage.md)\n */\nexport function AutoImage(props: AutoImageProps) {\n  const { maxWidth, maxHeight, ...ImageProps } = props\n  const source = props.source as ImageURISource\n\n  const [width, height] = useAutoImage(\n    Platform.select({\n      web: (source?.uri as string) ?? (source as string),\n      default: source?.uri as string,\n    }),\n    [maxWidth, maxHeight],\n  )\n\n  return <Image {...ImageProps} style={[{ width, height }, props.style]} />\n}\n"],"mappings":"42BAAA,MAAO,CAAAA,KAAK,EAAIC,eAAe,CAAEC,QAAQ,KAAQ,OAAO,QAAAC,KAAA,kDAAAC,QAAA,qDAAAC,GAAA,IAAAC,IAAA,yBAyBxD,MAAO,SAAS,CAAAC,YAAYA,CAC1BC,SAAiB,CACjBC,UAAkD,CACjB,CACjC,IAAAC,SAAA,CAAgER,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAAS,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAAG,WAAA,CAAAD,cAAA,CAAAD,UAAA,OAAxEG,WAAW,CAAAD,WAAA,IAAEE,YAAY,CAAAF,WAAA,IAAGG,wBAAwB,CAAAL,UAAA,IAC5D,GAAM,CAAAM,iBAAiB,CAAGH,WAAW,CAAGC,YAAY,CACpD,IAAAG,IAAA,CAA8BT,UAAU,OAAVA,UAAU,CAAI,EAAE,CAAAU,KAAA,CAAAP,cAAA,CAAAM,IAAA,IAAvCE,QAAQ,CAAAD,KAAA,IAAEE,SAAS,CAAAF,KAAA,IAE1BlB,eAAe,CAAC,UAAM,CACpB,GAAI,CAACO,SAAS,CAAE,OAEhBL,KAAK,CAACmB,OAAO,CAACd,SAAS,CAAE,SAACe,CAAC,CAAEC,CAAC,QAAK,CAAAR,wBAAwB,CAAC,CAACO,CAAC,CAAEC,CAAC,CAAC,CAAC,GAAC,CACtE,CAAC,CAAE,CAAChB,SAAS,CAAC,CAAC,CAEf,GAAIiB,MAAM,CAACC,KAAK,CAACT,iBAAiB,CAAC,CAAE,MAAO,CAAC,CAAC,CAAE,CAAC,CAAC,CAElD,GAAIG,QAAQ,EAAIC,SAAS,CAAE,CACzB,GAAM,CAAAM,WAAW,CAAGC,IAAI,CAACC,GAAG,CAACT,QAAQ,CAAGN,WAAW,CAAEO,SAAS,CAAGN,YAAY,CAAC,CAC9E,MAAO,CAACD,WAAW,CAAGa,WAAW,CAAEZ,YAAY,CAAGY,WAAW,CAAC,CAChE,CAAC,IAAM,IAAIP,QAAQ,CAAE,CACnB,MAAO,CAACA,QAAQ,CAAEA,QAAQ,CAAGH,iBAAiB,CAAC,CACjD,CAAC,IAAM,IAAII,SAAS,CAAE,CACpB,MAAO,CAACA,SAAS,CAAGJ,iBAAiB,CAAEI,SAAS,CAAC,CACnD,CAAC,IAAM,CACL,MAAO,CAACP,WAAW,CAAEC,YAAY,CAAC,CACpC,CACF,CAOA,MAAO,SAAS,CAAAe,SAASA,CAACC,KAAqB,CAAE,KAAAC,KAAA,CAC/C,GAAQ,CAAAZ,QAAQ,CAA+BW,KAAK,CAA5CX,QAAQ,CAAEC,SAAS,CAAoBU,KAAK,CAAlCV,SAAS,CAAKY,UAAU,CAAAC,wBAAA,CAAKH,KAAK,CAAAI,SAAA,EACpD,GAAM,CAAAC,MAAM,CAAGL,KAAK,CAACK,MAAwB,CAE7C,IAAAC,aAAA,CAAwB9B,YAAY,CAClCH,QAAQ,CAACkC,MAAM,CAAC,CACdC,GAAG,EAAAP,KAAA,CAAGI,MAAM,cAANA,MAAM,CAAEI,GAAG,QAAAR,KAAA,CAAgBI,MAAiB,CAClDK,OAAO,CAAEL,MAAM,cAANA,MAAM,CAAEI,GACnB,CAAC,CAAC,CACF,CAACpB,QAAQ,CAAEC,SAAS,CACtB,CAAC,CAAAqB,cAAA,CAAA9B,cAAA,CAAAyB,aAAA,IANMM,KAAK,CAAAD,cAAA,IAAEE,MAAM,CAAAF,cAAA,IAQpB,MAAO,CAAApC,IAAA,CAACH,KAAK,CAAA0C,aAAA,CAAAA,aAAA,IAAKZ,UAAU,MAAEa,KAAK,CAAE,CAAC,CAAEH,KAAK,CAALA,KAAK,CAAEC,MAAM,CAANA,MAAO,CAAC,CAAEb,KAAK,CAACe,KAAK,CAAE,EAAE,CAAC,CAC3E"},"metadata":{},"sourceType":"module","externalDependencies":[]}