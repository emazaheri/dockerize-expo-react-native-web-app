{"ast":null,"code":"import*as Localization from\"expo-localization\";import i18n from\"i18n-js\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import en from\"./en\";import ar from\"./ar\";import ko from\"./ko\";import fr from\"./fr\";i18n.fallbacks=true;i18n.translations={ar:ar,en:en,\"en-US\":en,ko:ko,fr:fr};var locales=Localization.getLocales();var preferredLanguage=locales[0]||{languageTag:\"en-US\",textDirection:\"ltr\"};i18n.locale=preferredLanguage.languageTag;export var isRTL=preferredLanguage.textDirection===\"rtl\";I18nManager.allowRTL(isRTL);I18nManager.forceRTL(isRTL);","map":{"version":3,"names":["Localization","i18n","I18nManager","en","ar","ko","fr","fallbacks","translations","locales","getLocales","preferredLanguage","languageTag","textDirection","locale","isRTL","allowRTL","forceRTL"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/i18n/i18n.ts"],"sourcesContent":["import * as Localization from \"expo-localization\"\nimport i18n from \"i18n-js\"\nimport { I18nManager } from \"react-native\"\n\n// if English isn't your default language, move Translations to the appropriate language file.\nimport en, { Translations } from \"./en\"\nimport ar from \"./ar\"\nimport ko from \"./ko\"\nimport fr from \"./fr\"\n\ni18n.fallbacks = true\n/**\n * we need always include \"*-US\" for some valid language codes because when you change the system language,\n * the language code is the suffixed with \"-US\". i.e. if a device is set to English (\"en\"),\n * if you change to another language and then return to English language code is now \"en-US\".\n */\ni18n.translations = { ar, en, \"en-US\": en, ko, fr }\n\nconst locales = Localization.getLocales() // This method is guaranteed to return at least one array item.\n// The preferred language is the first element in the array, however, we fallback to en-US, especially for tests.\nconst preferredLanguage:\n  | Localization.Locale\n  | { languageTag: string; textDirection: \"ltr\" | \"rtl\" } = locales[0] || {\n  languageTag: \"en-US\",\n  textDirection: \"ltr\",\n}\ni18n.locale = preferredLanguage.languageTag\n\n// handle RTL languages\nexport const isRTL = preferredLanguage.textDirection === \"rtl\"\nI18nManager.allowRTL(isRTL)\nI18nManager.forceRTL(isRTL)\n\n/**\n * Builds up valid keypaths for translations.\n */\nexport type TxKeyPath = RecursiveKeyOf<Translations>\n\n// via: https://stackoverflow.com/a/65333050\ntype RecursiveKeyOf<TObj extends object> = {\n  [TKey in keyof TObj & (string | number)]: RecursiveKeyOfHandleValue<TObj[TKey], `${TKey}`>\n}[keyof TObj & (string | number)]\n\ntype RecursiveKeyOfInner<TObj extends object> = {\n  [TKey in keyof TObj & (string | number)]: RecursiveKeyOfHandleValue<\n    TObj[TKey],\n    `['${TKey}']` | `.${TKey}`\n  >\n}[keyof TObj & (string | number)]\n\ntype RecursiveKeyOfHandleValue<TValue, Text extends string> = TValue extends any[]\n  ? Text\n  : TValue extends object\n  ? Text | `${Text}${RecursiveKeyOfInner<TValue>}`\n  : Text\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,YAAY,KAAM,mBAAmB,CACjD,MAAO,CAAAC,IAAI,KAAM,SAAS,QAAAC,WAAA,iDAI1B,MAAO,CAAAC,EAAE,YACT,MAAO,CAAAC,EAAE,YACT,MAAO,CAAAC,EAAE,YACT,MAAO,CAAAC,EAAE,YAETL,IAAI,CAACM,SAAS,CAAG,IAAI,CAMrBN,IAAI,CAACO,YAAY,CAAG,CAAEJ,EAAE,CAAFA,EAAE,CAAED,EAAE,CAAFA,EAAE,CAAE,OAAO,CAAEA,EAAE,CAAEE,EAAE,CAAFA,EAAE,CAAEC,EAAE,CAAFA,EAAG,CAAC,CAEnD,GAAM,CAAAG,OAAO,CAAGT,YAAY,CAACU,UAAU,CAAC,CAAC,CAEzC,GAAM,CAAAC,iBAEmD,CAAGF,OAAO,CAAC,CAAC,CAAC,EAAI,CACxEG,WAAW,CAAE,OAAO,CACpBC,aAAa,CAAE,KACjB,CAAC,CACDZ,IAAI,CAACa,MAAM,CAAGH,iBAAiB,CAACC,WAAW,CAG3C,MAAO,IAAM,CAAAG,KAAK,CAAGJ,iBAAiB,CAACE,aAAa,GAAK,KAAK,CAC9DX,WAAW,CAACc,QAAQ,CAACD,KAAK,CAAC,CAC3Bb,WAAW,CAACe,QAAQ,CAACF,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}