{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{applySnapshot,onSnapshot}from\"mobx-state-tree\";import*as storage from\"../../utils/storage\";var ROOT_STATE_STORAGE_KEY=\"root-v1\";var _disposer;export function setupRootStore(_x){return _setupRootStore.apply(this,arguments);}function _setupRootStore(){_setupRootStore=_asyncToGenerator(function*(rootStore){var restoredState;try{var _yield$storage$load;restoredState=(_yield$storage$load=yield storage.load(ROOT_STATE_STORAGE_KEY))!=null?_yield$storage$load:{};applySnapshot(rootStore,restoredState);}catch(e){if(__DEV__){console.tron.error(e.message,null);}}if(_disposer)_disposer();_disposer=onSnapshot(rootStore,function(snapshot){return storage.save(ROOT_STATE_STORAGE_KEY,snapshot);});var unsubscribe=function unsubscribe(){_disposer();_disposer=undefined;};return{rootStore:rootStore,restoredState:restoredState,unsubscribe:unsubscribe};});return _setupRootStore.apply(this,arguments);}","map":{"version":3,"names":["applySnapshot","onSnapshot","storage","ROOT_STATE_STORAGE_KEY","_disposer","setupRootStore","_x","_setupRootStore","apply","arguments","_asyncToGenerator","rootStore","restoredState","_yield$storage$load","load","e","__DEV__","console","tron","error","message","snapshot","save","unsubscribe","undefined"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/models/helpers/setupRootStore.ts"],"sourcesContent":["/**\n * This file is where we do \"rehydration\" of your RootStore from AsyncStorage.\n * This lets you persist your state between app launches.\n *\n * Navigation state persistence is handled in navigationUtilities.tsx.\n *\n * Note that Fast Refresh doesn't play well with this file, so if you edit this,\n * do a full refresh of your app instead.\n *\n * @refresh reset\n */\nimport { applySnapshot, IDisposer, onSnapshot } from \"mobx-state-tree\"\nimport { RootStore, RootStoreSnapshot } from \"../RootStore\"\nimport * as storage from \"../../utils/storage\"\n\n/**\n * The key we'll be saving our state as within async storage.\n */\nconst ROOT_STATE_STORAGE_KEY = \"root-v1\"\n\n/**\n * Setup the root state.\n */\nlet _disposer: IDisposer\nexport async function setupRootStore(rootStore: RootStore) {\n  let restoredState: RootStoreSnapshot | undefined | null\n\n  try {\n    // load the last known state from AsyncStorage\n    restoredState = ((await storage.load(ROOT_STATE_STORAGE_KEY)) ?? {}) as RootStoreSnapshot\n    applySnapshot(rootStore, restoredState)\n  } catch (e) {\n    // if there's any problems loading, then inform the dev what happened\n    if (__DEV__) {\n      console.tron.error(e.message, null)\n    }\n  }\n\n  // stop tracking state changes if we've already setup\n  if (_disposer) _disposer()\n\n  // track changes & save to AsyncStorage\n  _disposer = onSnapshot(rootStore, (snapshot) => storage.save(ROOT_STATE_STORAGE_KEY, snapshot))\n\n  const unsubscribe = () => {\n    _disposer()\n    _disposer = undefined\n  }\n\n  return { rootStore, restoredState, unsubscribe }\n}\n"],"mappings":"uEAWA,OAASA,aAAa,CAAaC,UAAU,KAAQ,iBAAiB,CAEtE,MAAO,GAAK,CAAAC,OAAO,2BAKnB,GAAM,CAAAC,sBAAsB,CAAG,SAAS,CAKxC,GAAI,CAAAC,SAAoB,CACxB,eAAsB,CAAAC,cAAcA,CAAAC,EAAA,SAAAC,eAAA,CAAAC,KAAA,MAAAC,SAAA,GA0BnC,SAAAF,gBAAA,EAAAA,eAAA,CAAAG,iBAAA,CA1BM,UAA8BC,SAAoB,CAAE,CACzD,GAAI,CAAAC,aAAmD,CAEvD,GAAI,KAAAC,mBAAA,CAEFD,aAAa,EAAAC,mBAAA,MAAW,CAAAX,OAAO,CAACY,IAAI,CAACX,sBAAsB,CAAC,QAAAU,mBAAA,CAAK,CAAC,CAAuB,CACzFb,aAAa,CAACW,SAAS,CAAEC,aAAa,CAAC,CACzC,CAAE,MAAOG,CAAC,CAAE,CAEV,GAAIC,OAAO,CAAE,CACXC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACK,OAAO,CAAE,IAAI,CAAC,CACrC,CACF,CAGA,GAAIhB,SAAS,CAAEA,SAAS,CAAC,CAAC,CAG1BA,SAAS,CAAGH,UAAU,CAACU,SAAS,CAAE,SAACU,QAAQ,QAAK,CAAAnB,OAAO,CAACoB,IAAI,CAACnB,sBAAsB,CAAEkB,QAAQ,CAAC,GAAC,CAE/F,GAAM,CAAAE,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAS,CACxBnB,SAAS,CAAC,CAAC,CACXA,SAAS,CAAGoB,SAAS,CACvB,CAAC,CAED,MAAO,CAAEb,SAAS,CAATA,SAAS,CAAEC,aAAa,CAAbA,aAAa,CAAEW,WAAW,CAAXA,WAAY,CAAC,CAClD,CAAC,SAAAhB,eAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}