{"ast":null,"code":"export var withSetPropAction=function withSetPropAction(mstInstance){return{setProp:function setProp(field,newValue){mstInstance[field]=newValue;}};};","map":{"version":3,"names":["withSetPropAction","mstInstance","setProp","field","newValue"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/models/helpers/withSetPropAction.ts"],"sourcesContent":["import { IStateTreeNode, SnapshotIn } from \"mobx-state-tree\"\n\n/**\n * If you include this in your model in an action() block just under your props,\n * it'll allow you to set property values directly while retaining type safety\n * and also is executed in an action. This is useful because often you find yourself\n * making a lot of repetitive setter actions that only update one prop.\n *\n * E.g.:\n *\n *  const UserModel = types.model(\"User\")\n *    .props({\n *      name: types.string,\n *      age: types.number\n *    })\n *    .actions(withSetPropAction)\n *\n *   const user = UserModel.create({ name: \"Jamon\", age: 40 })\n *\n *   user.setProp(\"name\", \"John\") // no type error\n *   user.setProp(\"age\", 30)      // no type error\n *   user.setProp(\"age\", \"30\")    // type error -- must be number\n */\nexport const withSetPropAction = <T extends IStateTreeNode>(mstInstance: T) => ({\n  // generic setter for all properties\n  setProp<K extends keyof SnapshotIn<T>, V extends SnapshotIn<T>[K]>(field: K, newValue: V) {\n    // @ts-ignore - for some reason TS complains about this, but it still works fine\n    mstInstance[field] = newValue\n  },\n})\n"],"mappings":"AAuBA,MAAO,IAAM,CAAAA,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAA8BC,WAAc,QAAM,CAE9EC,OAAO,UAAAA,QAA4DC,KAAQ,CAAEC,QAAW,CAAE,CAExFH,WAAW,CAACE,KAAK,CAAC,CAAGC,QAAQ,CAC/B,CACF,CAAC,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}