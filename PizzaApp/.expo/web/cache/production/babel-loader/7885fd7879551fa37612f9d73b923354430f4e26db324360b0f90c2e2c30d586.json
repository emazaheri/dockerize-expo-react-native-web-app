{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{createContext,useContext,useEffect,useState}from\"react\";import{RootStoreModel}from\"../RootStore\";import{setupRootStore}from\"./setupRootStore\";var _rootStore=RootStoreModel.create({});var RootStoreContext=createContext(_rootStore);export var RootStoreProvider=RootStoreContext.Provider;export var useStores=function useStores(){return useContext(RootStoreContext);};export var useInitialRootStore=function useInitialRootStore(callback){var rootStore=useStores();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),rehydrated=_useState2[0],setRehydrated=_useState2[1];useEffect(function(){var _unsubscribe;_asyncToGenerator(function*(){var _yield$setupRootStore=yield setupRootStore(rootStore),unsubscribe=_yield$setupRootStore.unsubscribe;_unsubscribe=unsubscribe;if(__DEV__){console.tron.trackMstNode(rootStore);}setRehydrated(true);if(callback)callback();})();return function(){if(_unsubscribe)_unsubscribe();};},[]);return{rootStore:rootStore,rehydrated:rehydrated};};","map":{"version":3,"names":["createContext","useContext","useEffect","useState","RootStoreModel","setupRootStore","_rootStore","create","RootStoreContext","RootStoreProvider","Provider","useStores","useInitialRootStore","callback","rootStore","_useState","_useState2","_slicedToArray","rehydrated","setRehydrated","_unsubscribe","_asyncToGenerator","_yield$setupRootStore","unsubscribe","__DEV__","console","tron","trackMstNode"],"sources":["/home/ehsan/dockerize-expo-rn-web-app/PizzaApp/app/models/helpers/useStores.ts"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\"\nimport { RootStore, RootStoreModel } from \"../RootStore\"\nimport { setupRootStore } from \"./setupRootStore\"\n\n/**\n * Create the initial (empty) global RootStore instance here.\n *\n * Later, it will be rehydrated in app.tsx with the setupRootStore function.\n *\n * If your RootStore requires specific properties to be instantiated,\n * you can do so here.\n *\n * If your RootStore has a _ton_ of sub-stores and properties (the tree is\n * very large), you may want to use a different strategy than immediately\n * instantiating it, although that should be rare.\n */\nconst _rootStore = RootStoreModel.create({})\n\n/**\n * The RootStoreContext provides a way to access\n * the RootStore in any screen or component.\n */\nconst RootStoreContext = createContext<RootStore>(_rootStore)\n\n/**\n * You can use this Provider to specify a *different* RootStore\n * than the singleton version above if you need to. Generally speaking,\n * this Provider & custom RootStore instances would only be used in\n * testing scenarios.\n */\nexport const RootStoreProvider = RootStoreContext.Provider\n\n/**\n * A hook that screens and other components can use to gain access to\n * our stores:\n *\n * const rootStore = useStores()\n *\n * or:\n *\n * const { someStore, someOtherStore } = useStores()\n */\nexport const useStores = () => useContext(RootStoreContext)\n\n/**\n * Used only in the app.tsx file, this hook sets up the RootStore\n * and then rehydrates it. It connects everything with Reactotron\n * and then lets the app know that everything is ready to go.\n */\nexport const useInitialRootStore = (callback: () => void | Promise<void>) => {\n  const rootStore = useStores()\n  const [rehydrated, setRehydrated] = useState(false)\n\n  // Kick off initial async loading actions, like loading fonts and rehydrating RootStore\n  useEffect(() => {\n    let _unsubscribe\n    ;(async () => {\n      // set up the RootStore (returns the state restored from AsyncStorage)\n      const { unsubscribe } = await setupRootStore(rootStore)\n      _unsubscribe = unsubscribe\n\n      // reactotron integration with the MST root store (DEV only)\n      if (__DEV__) {\n        console.tron.trackMstNode(rootStore)\n      }\n\n      // let the app know we've finished rehydrating\n      setRehydrated(true)\n\n      // invoke the callback, if provided\n      if (callback) callback()\n    })()\n\n    return () => {\n      // cleanup\n      if (_unsubscribe) _unsubscribe()\n    }\n  }, [])\n\n  return { rootStore, rehydrated }\n}\n"],"mappings":"wIAAA,OAASA,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CACtE,OAAoBC,cAAc,oBAClC,OAASC,cAAc,wBAcvB,GAAM,CAAAC,UAAU,CAAGF,cAAc,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC,CAM5C,GAAM,CAAAC,gBAAgB,CAAGR,aAAa,CAAYM,UAAU,CAAC,CAQ7D,MAAO,IAAM,CAAAG,iBAAiB,CAAGD,gBAAgB,CAACE,QAAQ,CAY1D,MAAO,IAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAA,QAAS,CAAAV,UAAU,CAACO,gBAAgB,CAAC,GAO3D,MAAO,IAAM,CAAAI,mBAAmB,CAAG,QAAtB,CAAAA,mBAAmBA,CAAIC,QAAoC,CAAK,CAC3E,GAAM,CAAAC,SAAS,CAAGH,SAAS,CAAC,CAAC,CAC7B,IAAAI,SAAA,CAAoCZ,QAAQ,CAAC,KAAK,CAAC,CAAAa,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA5CG,UAAU,CAAAF,UAAA,IAAEG,aAAa,CAAAH,UAAA,IAGhCd,SAAS,CAAC,UAAM,CACd,GAAI,CAAAkB,YAAY,CACfC,iBAAA,CAAC,WAAY,CAEZ,IAAAC,qBAAA,MAA8B,CAAAjB,cAAc,CAACS,SAAS,CAAC,CAA/CS,WAAW,CAAAD,qBAAA,CAAXC,WAAW,CACnBH,YAAY,CAAGG,WAAW,CAG1B,GAAIC,OAAO,CAAE,CACXC,OAAO,CAACC,IAAI,CAACC,YAAY,CAACb,SAAS,CAAC,CACtC,CAGAK,aAAa,CAAC,IAAI,CAAC,CAGnB,GAAIN,QAAQ,CAAEA,QAAQ,CAAC,CAAC,CAC1B,CAAC,EAAE,CAAC,CAEJ,MAAO,WAAM,CAEX,GAAIO,YAAY,CAAEA,YAAY,CAAC,CAAC,CAClC,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEN,SAAS,CAATA,SAAS,CAAEI,UAAU,CAAVA,UAAW,CAAC,CAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}